!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(d,e){function t(e,t){return t.toUpperCase()}var f=[],c=f.slice,g=f.concat,a=f.push,r=f.indexOf,n={},i=n.toString,m=n.hasOwnProperty,v={},o="1.11.3",C=function(e,t){return new C.fn.init(e,t)},s=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,l=/^-ms-/,u=/-([\da-z])/gi;function p(e){var t="length"in e&&e.length,n=C.type(e);return"function"!==n&&!C.isWindow(e)&&(!(1!==e.nodeType||!t)||("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e))}C.fn=C.prototype={jquery:o,constructor:C,selector:"",length:0,toArray:function(){return c.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:c.call(this)},pushStack:function(e){var t=C.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return C.each(this,e,t)},map:function(n){return this.pushStack(C.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(c.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:a,sort:f.sort,splice:f.splice},C.extend=C.fn.extend=function(){var e,t,n,i,r,o,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||C.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(r=arguments[a]))for(i in r)e=s[i],s!==(n=r[i])&&(u&&n&&(C.isPlainObject(n)||(t=C.isArray(n)))?(o=t?(t=!1,e&&C.isArray(e)?e:[]):e&&C.isPlainObject(e)?e:{},s[i]=C.extend(u,o,n)):void 0!==n&&(s[i]=n));return s},C.extend({expando:"jQuery"+(o+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===C.type(e)},isArray:Array.isArray||function(e){return"array"===C.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){return!C.isArray(e)&&0<=e-parseFloat(e)+1},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},isPlainObject:function(e){var t;if(!e||"object"!==C.type(e)||e.nodeType||C.isWindow(e))return!1;try{if(e.constructor&&!m.call(e,"constructor")&&!m.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(e){return!1}if(v.ownLast)for(t in e)return m.call(e,t);for(t in e);return void 0===t||m.call(e,t)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[i.call(e)]||"object":typeof e},globalEval:function(e){e&&C.trim(e)&&(d.execScript||function(e){d.eval.call(d,e)})(e)},camelCase:function(e){return e.replace(l,"ms-").replace(u,t)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var i=0,r=e.length,o=p(e);if(n){if(o)for(;i<r&&!1!==t.apply(e[i],n);i++);else for(i in e)if(!1===t.apply(e[i],n))break}else if(o)for(;i<r&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(s,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(p(Object(e))?C.merge(n,"string"==typeof e?[e]:e):a.call(n,e)),n},inArray:function(e,t,n){var i;if(t){if(r)return r.call(t,e,n);for(i=t.length,n=n?n<0?Math.max(0,i+n):n:0;n<i;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;)e[r++]=t[i++];if(n!=n)for(;void 0!==t[i];)e[r++]=t[i++];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,s=!n;r<o;r++)!t(e[r],r)!=s&&i.push(e[r]);return i},map:function(e,t,n){var i,r=0,o=e.length,s=[];if(p(e))for(;r<o;r++)null!=(i=t(e[r],r,n))&&s.push(i);else for(r in e)null!=(i=t(e[r],r,n))&&s.push(i);return g.apply([],s)},guid:1,proxy:function(e,t){var n,i,r;if("string"==typeof t&&(r=e[t],t=e,e=r),C.isFunction(e))return n=c.call(arguments,2),(i=function(){return e.apply(t||this,n.concat(c.call(arguments)))}).guid=e.guid=e.guid||C.guid++,i},now:function(){return+new Date},support:v}),C.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var h=function(n){function f(e,t,n){var i="0x"+t-65536;return i!=i||n?t:i<0?String.fromCharCode(65536+i):String.fromCharCode(i>>10|55296,1023&i|56320)}function i(){v()}var e,d,x,o,r,g,p,m,w,u,c,v,T,s,y,b,a,h,C,_="sizzle"+ +new Date,E=n.document,S=0,N=0,l=oe(),D=oe(),k=oe(),j=function(e,t){return e===t&&(c=!0),0},A={}.hasOwnProperty,t=[],P=t.pop,H=t.push,M=t.push,L=t.slice,O=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},I="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",F="[\\x20\\t\\r\\n\\f]",W="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",q=W.replace("w","w#"),R="\\["+F+"*("+W+")(?:"+F+"*([*^$|!~]?=)"+F+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+F+"*\\]",$=":("+W+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",B=new RegExp(F+"+","g"),z=new RegExp("^"+F+"+|((?:^|[^\\\\])(?:\\\\.)*)"+F+"+$","g"),U=new RegExp("^"+F+"*,"+F+"*"),X=new RegExp("^"+F+"*([>+~]|"+F+")"+F+"*"),Y=new RegExp("="+F+"*([^\\]'\"]*?)"+F+"*\\]","g"),Q=new RegExp($),J=new RegExp("^"+q+"$"),V={ID:new RegExp("^#("+W+")"),CLASS:new RegExp("^\\.("+W+")"),TAG:new RegExp("^("+W.replace("w","w*")+")"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+$),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+F+"*(even|odd|(([+-]|)(\\d*)n|)"+F+"*(?:([+-]|)"+F+"*(\\d+)|))"+F+"*\\)|)","i"),bool:new RegExp("^(?:"+I+")$","i"),needsContext:new RegExp("^"+F+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+F+"*((?:-\\d)?\\d*)"+F+"*\\)|)(?=[^-]|$)","i")},G=/^(?:input|select|textarea|button)$/i,K=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,ee=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,te=/[+~]/,ne=/'|\\/g,ie=new RegExp("\\\\([\\da-f]{1,6}"+F+"?|("+F+")|.)","ig");try{M.apply(t=L.call(E.childNodes),E.childNodes),t[E.childNodes.length].nodeType}catch(e){M={apply:t.length?function(e,t){H.apply(e,L.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function re(e,t,n,i){var r,o,s,a,l,u,c,f,p,h;if((t?t.ownerDocument||t:E)!==T&&v(t),n=n||[],a=(t=t||T).nodeType,"string"!=typeof e||!e||1!==a&&9!==a&&11!==a)return n;if(!i&&y){if(11!==a&&(r=ee.exec(e)))if(s=r[1]){if(9===a){if(!(o=t.getElementById(s))||!o.parentNode)return n;if(o.id===s)return n.push(o),n}else if(t.ownerDocument&&(o=t.ownerDocument.getElementById(s))&&C(t,o)&&o.id===s)return n.push(o),n}else{if(r[2])return M.apply(n,t.getElementsByTagName(e)),n;if((s=r[3])&&d.getElementsByClassName)return M.apply(n,t.getElementsByClassName(s)),n}if(d.qsa&&(!b||!b.test(e))){if(f=c=_,p=t,h=1!==a&&e,1===a&&"object"!==t.nodeName.toLowerCase()){for(u=g(e),(c=t.getAttribute("id"))?f=c.replace(ne,"\\$&"):t.setAttribute("id",f),f="[id='"+f+"'] ",l=u.length;l--;)u[l]=f+ge(u[l]);p=te.test(e)&&he(t.parentNode)||t,h=u.join(",")}if(h)try{return M.apply(n,p.querySelectorAll(h)),n}catch(e){}finally{c||t.removeAttribute("id")}}}return m(e.replace(z,"$1"),t,n,i)}function oe(){var i=[];return function e(t,n){return i.push(t+" ")>x.cacheLength&&delete e[i.shift()],e[t+" "]=n}}function se(e){return e[_]=!0,e}function ae(e){var t=T.createElement("div");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function le(e,t){for(var n=e.split("|"),i=e.length;i--;)x.attrHandle[n[i]]=t}function ue(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||1<<31)-(~e.sourceIndex||1<<31);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function ce(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function fe(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function pe(s){return se(function(o){return o=+o,se(function(e,t){for(var n,i=s([],e.length,o),r=i.length;r--;)e[n=i[r]]&&(e[n]=!(t[n]=e[n]))})})}function he(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in d=re.support={},r=re.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},v=re.setDocument=function(e){var t,n,l=e?e.ownerDocument||e:E;return l!==T&&9===l.nodeType&&l.documentElement?(s=(T=l).documentElement,(n=l.defaultView)&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",i,!1):n.attachEvent&&n.attachEvent("onunload",i)),y=!r(l),d.attributes=ae(function(e){return e.className="i",!e.getAttribute("className")}),d.getElementsByTagName=ae(function(e){return e.appendChild(l.createComment("")),!e.getElementsByTagName("*").length}),d.getElementsByClassName=Z.test(l.getElementsByClassName),d.getById=ae(function(e){return s.appendChild(e).id=_,!l.getElementsByName||!l.getElementsByName(_).length}),d.getById?(x.find.ID=function(e,t){if(void 0!==t.getElementById&&y){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},x.filter.ID=function(e){var t=e.replace(ie,f);return function(e){return e.getAttribute("id")===t}}):(delete x.find.ID,x.filter.ID=function(e){var n=e.replace(ie,f);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}}),x.find.TAG=d.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):d.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"!==e)return o;for(;n=o[r++];)1===n.nodeType&&i.push(n);return i},x.find.CLASS=d.getElementsByClassName&&function(e,t){if(y)return t.getElementsByClassName(e)},a=[],b=[],(d.qsa=Z.test(l.querySelectorAll))&&(ae(function(e){s.appendChild(e).innerHTML="<a id='"+_+"'></a><select id='"+_+"-\f]' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&b.push("[*^$]="+F+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||b.push("\\["+F+"*(?:value|"+I+")"),e.querySelectorAll("[id~="+_+"-]").length||b.push("~="),e.querySelectorAll(":checked").length||b.push(":checked"),e.querySelectorAll("a#"+_+"+*").length||b.push(".#.+[+~]")}),ae(function(e){var t=l.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&b.push("name"+F+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||b.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),b.push(",.*:")})),(d.matchesSelector=Z.test(h=s.matches||s.webkitMatchesSelector||s.mozMatchesSelector||s.oMatchesSelector||s.msMatchesSelector))&&ae(function(e){d.disconnectedMatch=h.call(e,"div"),h.call(e,"[s!='']:x"),a.push("!=",$)}),b=b.length&&new RegExp(b.join("|")),a=a.length&&new RegExp(a.join("|")),t=Z.test(s.compareDocumentPosition),C=t||Z.test(s.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},j=t?function(e,t){if(e===t)return c=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!d.sortDetached&&t.compareDocumentPosition(e)===n?e===l||e.ownerDocument===E&&C(E,e)?-1:t===l||t.ownerDocument===E&&C(E,t)?1:u?O(u,e)-O(u,t):0:4&n?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!r||!o)return e===l?-1:t===l?1:r?-1:o?1:u?O(u,e)-O(u,t):0;if(r===o)return ue(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?ue(s[i],a[i]):s[i]===E?-1:a[i]===E?1:0},l):T},re.matches=function(e,t){return re(e,null,null,t)},re.matchesSelector=function(e,t){if((e.ownerDocument||e)!==T&&v(e),t=t.replace(Y,"='$1']"),d.matchesSelector&&y&&(!a||!a.test(t))&&(!b||!b.test(t)))try{var n=h.call(e,t);if(n||d.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){}return 0<re(t,T,null,[e]).length},re.contains=function(e,t){return(e.ownerDocument||e)!==T&&v(e),C(e,t)},re.attr=function(e,t){(e.ownerDocument||e)!==T&&v(e);var n=x.attrHandle[t.toLowerCase()],i=n&&A.call(x.attrHandle,t.toLowerCase())?n(e,t,!y):void 0;return void 0!==i?i:d.attributes||!y?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},re.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},re.uniqueSort=function(e){var t,n=[],i=0,r=0;if(c=!d.detectDuplicates,u=!d.sortStable&&e.slice(0),e.sort(j),c){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)e.splice(n[i],1)}return u=null,e},o=re.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=o(t);return n},(x=re.selectors={cacheLength:50,createPseudo:se,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ie,f),e[3]=(e[3]||e[4]||e[5]||"").replace(ie,f),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||re.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&re.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return V.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&Q.test(n)&&(t=g(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ie,f).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=l[e+" "];return t||(t=new RegExp("(^|"+F+")"+e+"("+F+"|$)"))&&l(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,i,r){return function(e){var t=re.attr(e,n);return null==t?"!="===i:!i||(t+="","="===i?t===r:"!="===i?t!==r:"^="===i?r&&0===t.indexOf(r):"*="===i?r&&-1<t.indexOf(r):"$="===i?r&&t.slice(-r.length)===r:"~="===i?-1<(" "+t.replace(B," ")+" ").indexOf(r):"|="===i&&(t===r||t.slice(0,r.length+1)===r+"-"))}},CHILD:function(h,e,t,d,g){var m="nth"!==h.slice(0,3),v="last"!==h.slice(-4),y="of-type"===e;return 1===d&&0===g?function(e){return!!e.parentNode}:function(e,t,n){var i,r,o,s,a,l,u=m!=v?"nextSibling":"previousSibling",c=e.parentNode,f=y&&e.nodeName.toLowerCase(),p=!n&&!y;if(c){if(m){for(;u;){for(o=e;o=o[u];)if(y?o.nodeName.toLowerCase()===f:1===o.nodeType)return!1;l=u="only"===h&&!l&&"nextSibling"}return!0}if(l=[v?c.firstChild:c.lastChild],v&&p){for(a=(i=(r=c[_]||(c[_]={}))[h]||[])[0]===S&&i[1],s=i[0]===S&&i[2],o=a&&c.childNodes[a];o=++a&&o&&o[u]||(s=a=0)||l.pop();)if(1===o.nodeType&&++s&&o===e){r[h]=[S,a,s];break}}else if(p&&(i=(e[_]||(e[_]={}))[h])&&i[0]===S)s=i[1];else for(;(o=++a&&o&&o[u]||(s=a=0)||l.pop())&&((y?o.nodeName.toLowerCase()!==f:1!==o.nodeType)||!++s||(p&&((o[_]||(o[_]={}))[h]=[S,s]),o!==e)););return(s-=g)===d||s%d==0&&0<=s/d}}},PSEUDO:function(e,o){var t,s=x.pseudos[e]||x.setFilters[e.toLowerCase()]||re.error("unsupported pseudo: "+e);return s[_]?s(o):1<s.length?(t=[e,e,"",o],x.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,t){for(var n,i=s(e,o),r=i.length;r--;)e[n=O(e,i[r])]=!(t[n]=i[r])}):function(e){return s(e,0,t)}):s}},pseudos:{not:se(function(e){var i=[],r=[],a=p(e.replace(z,"$1"));return a[_]?se(function(e,t,n,i){for(var r,o=a(e,null,i,[]),s=e.length;s--;)(r=o[s])&&(e[s]=!(t[s]=r))}):function(e,t,n){return i[0]=e,a(i,null,n,r),i[0]=null,!r.pop()}}),has:se(function(t){return function(e){return 0<re(t,e).length}}),contains:se(function(t){return t=t.replace(ie,f),function(e){return-1<(e.textContent||e.innerText||o(e)).indexOf(t)}}),lang:se(function(n){return J.test(n||"")||re.error("unsupported lang: "+n),n=n.replace(ie,f).toLowerCase(),function(e){var t;do{if(t=y?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===s},focus:function(e){return e===T.activeElement&&(!T.hasFocus||T.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return!1===e.disabled},disabled:function(e){return!0===e.disabled},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:pe(function(){return[0]}),last:pe(function(e,t){return[t-1]}),eq:pe(function(e,t,n){return[n<0?n+t:n]}),even:pe(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:pe(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:pe(function(e,t,n){for(var i=n<0?n+t:n;0<=--i;)e.push(i);return e}),gt:pe(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[e]=ce(e);for(e in{submit:!0,reset:!0})x.pseudos[e]=fe(e);function de(){}function ge(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function me(s,e,t){var a=e.dir,l=t&&"parentNode"===a,u=N++;return e.first?function(e,t,n){for(;e=e[a];)if(1===e.nodeType||l)return s(e,t,n)}:function(e,t,n){var i,r,o=[S,u];if(n){for(;e=e[a];)if((1===e.nodeType||l)&&s(e,t,n))return!0}else for(;e=e[a];)if(1===e.nodeType||l){if((i=(r=e[_]||(e[_]={}))[a])&&i[0]===S&&i[1]===u)return o[2]=i[2];if((r[a]=o)[2]=s(e,t,n))return!0}}}function ve(r){return 1<r.length?function(e,t,n){for(var i=r.length;i--;)if(!r[i](e,t,n))return!1;return!0}:r[0]}function ye(e,t,n,i,r){for(var o,s=[],a=0,l=e.length,u=null!=t;a<l;a++)(o=e[a])&&(n&&!n(o,i,r)||(s.push(o),u&&t.push(a)));return s}function be(h,d,g,m,v,e){return m&&!m[_]&&(m=be(m)),v&&!v[_]&&(v=be(v,e)),se(function(e,t,n,i){var r,o,s,a=[],l=[],u=t.length,c=e||function(e,t,n){for(var i=0,r=t.length;i<r;i++)re(e,t[i],n);return n}(d||"*",n.nodeType?[n]:n,[]),f=!h||!e&&d?c:ye(c,a,h,n,i),p=g?v||(e?h:u||m)?[]:t:f;if(g&&g(f,p,n,i),m)for(r=ye(p,l),m(r,[],n,i),o=r.length;o--;)(s=r[o])&&(p[l[o]]=!(f[l[o]]=s));if(e){if(v||h){if(v){for(r=[],o=p.length;o--;)(s=p[o])&&r.push(f[o]=s);v(null,p=[],r,i)}for(o=p.length;o--;)(s=p[o])&&-1<(r=v?O(e,s):a[o])&&(e[r]=!(t[r]=s))}}else p=ye(p===t?p.splice(u,p.length):p),v?v(null,t,p,i):M.apply(t,p)})}function xe(e){for(var r,t,n,i=e.length,o=x.relative[e[0].type],s=o||x.relative[" "],a=o?1:0,l=me(function(e){return e===r},s,!0),u=me(function(e){return-1<O(r,e)},s,!0),c=[function(e,t,n){var i=!o&&(n||t!==w)||((r=t).nodeType?l:u)(e,t,n);return r=null,i}];a<i;a++)if(t=x.relative[e[a].type])c=[me(ve(c),t)];else{if((t=x.filter[e[a].type].apply(null,e[a].matches))[_]){for(n=++a;n<i&&!x.relative[e[n].type];n++);return be(1<a&&ve(c),1<a&&ge(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(z,"$1"),t,a<n&&xe(e.slice(a,n)),n<i&&xe(e=e.slice(n)),n<i&&ge(e))}c.push(t)}return ve(c)}function we(m,v){function e(e,t,n,i,r){var o,s,a,l=0,u="0",c=e&&[],f=[],p=w,h=e||b&&x.find.TAG("*",r),d=S+=null==p?1:Math.random()||.1,g=h.length;for(r&&(w=t!==T&&t);u!==g&&null!=(o=h[u]);u++){if(b&&o){for(s=0;a=m[s++];)if(a(o,t,n)){i.push(o);break}r&&(S=d)}y&&((o=!a&&o)&&l--,e&&c.push(o))}if(l+=u,y&&u!==l){for(s=0;a=v[s++];)a(c,f,t,n);if(e){if(0<l)for(;u--;)c[u]||f[u]||(f[u]=P.call(i));f=ye(f)}M.apply(i,f),r&&!e&&0<f.length&&1<l+v.length&&re.uniqueSort(i)}return r&&(S=d,w=p),c}var y=0<v.length,b=0<m.length;return y?se(e):e}return de.prototype=x.filters=x.pseudos,x.setFilters=new de,g=re.tokenize=function(e,t){var n,i,r,o,s,a,l,u=D[e+" "];if(u)return t?0:u.slice(0);for(s=e,a=[],l=x.preFilter;s;){for(o in n&&!(i=U.exec(s))||(i&&(s=s.slice(i[0].length)||s),a.push(r=[])),n=!1,(i=X.exec(s))&&(n=i.shift(),r.push({value:n,type:i[0].replace(z," ")}),s=s.slice(n.length)),x.filter)!(i=V[o].exec(s))||l[o]&&!(i=l[o](i))||(n=i.shift(),r.push({value:n,type:o,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?re.error(e):D(e,a).slice(0)},p=re.compile=function(e,t){var n,i=[],r=[],o=k[e+" "];if(!o){for(n=(t=t||g(e)).length;n--;)(o=xe(t[n]))[_]?i.push(o):r.push(o);(o=k(e,we(r,i))).selector=e}return o},m=re.select=function(e,t,n,i){var r,o,s,a,l,u="function"==typeof e&&e,c=!i&&g(e=u.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&"ID"===(s=o[0]).type&&d.getById&&9===t.nodeType&&y&&x.relative[o[1].type]){if(!(t=(x.find.ID(s.matches[0].replace(ie,f),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(r=V.needsContext.test(e)?0:o.length;r--&&(s=o[r],!x.relative[a=s.type]);)if((l=x.find[a])&&(i=l(s.matches[0].replace(ie,f),te.test(o[0].type)&&he(t.parentNode)||t))){if(o.splice(r,1),!(e=i.length&&ge(o)))return M.apply(n,i),n;break}}return(u||p(e,c))(i,t,!y,n,te.test(e)&&he(t.parentNode)||t),n},d.sortStable=_.split("").sort(j).join("")===_,d.detectDuplicates=!!c,v(),d.sortDetached=ae(function(e){return 1&e.compareDocumentPosition(T.createElement("div"))}),ae(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||le("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),d.attributes&&ae(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||le("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ae(function(e){return null==e.getAttribute("disabled")})||le(I,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),re}(d);C.find=h,C.expr=h.selectors,C.expr[":"]=C.expr.pseudos,C.unique=h.uniqueSort,C.text=h.getText,C.isXMLDoc=h.isXML,C.contains=h.contains;var y=C.expr.match.needsContext,b=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,x=/^.[^:#\[\.,]*$/;function w(e,n,i){if(C.isFunction(n))return C.grep(e,function(e,t){return!!n.call(e,t,e)!==i});if(n.nodeType)return C.grep(e,function(e){return e===n!==i});if("string"==typeof n){if(x.test(n))return C.filter(n,e,i);n=C.filter(n,e)}return C.grep(e,function(e){return 0<=C.inArray(e,n)!==i})}C.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?C.find.matchesSelector(i,e)?[i]:[]:C.find.matches(e,C.grep(t,function(e){return 1===e.nodeType}))},C.fn.extend({find:function(e){var t,n=[],i=this,r=i.length;if("string"!=typeof e)return this.pushStack(C(e).filter(function(){for(t=0;t<r;t++)if(C.contains(i[t],this))return!0}));for(t=0;t<r;t++)C.find(e,i[t],n);return(n=this.pushStack(1<r?C.unique(n):n)).selector=this.selector?this.selector+" "+e:e,n},filter:function(e){return this.pushStack(w(this,e||[],!1))},not:function(e){return this.pushStack(w(this,e||[],!0))},is:function(e){return!!w(this,"string"==typeof e&&y.test(e)?C(e):e||[],!1).length}});var T,_=d.document,E=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(C.fn.init=function(e,t){var n,i;if(!e)return this;if("string"!=typeof e)return e.nodeType?(this.context=this[0]=e,this.length=1,this):C.isFunction(e)?void 0!==T.ready?T.ready(e):e(C):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),C.makeArray(e,this));if(!(n="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&3<=e.length?[null,e,null]:E.exec(e))||!n[1]&&t)return!t||t.jquery?(t||T).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof C?t[0]:t,C.merge(this,C.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:_,!0)),b.test(n[1])&&C.isPlainObject(t))for(n in t)C.isFunction(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}if((i=_.getElementById(n[2]))&&i.parentNode){if(i.id!==n[2])return T.find(e);this.length=1,this[0]=i}return this.context=_,this.selector=e,this}).prototype=C.fn,T=C(_);var S=/^(?:parents|prev(?:Until|All))/,N={children:!0,contents:!0,next:!0,prev:!0};function D(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}C.extend({dir:function(e,t,n){for(var i=[],r=e[t];r&&9!==r.nodeType&&(void 0===n||1!==r.nodeType||!C(r).is(n));)1===r.nodeType&&i.push(r),r=r[t];return i},sibling:function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}}),C.fn.extend({has:function(e){var t,n=C(e,this),i=n.length;return this.filter(function(){for(t=0;t<i;t++)if(C.contains(this,n[t]))return!0})},closest:function(e,t){for(var n,i=0,r=this.length,o=[],s=y.test(e)||"string"!=typeof e?C(e,t||this.context):0;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&C.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?C.unique(o):o)},index:function(e){return e?"string"==typeof e?C.inArray(this[0],C(e)):C.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(C.unique(C.merge(this.get(),C(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),C.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return C.dir(e,"parentNode")},parentsUntil:function(e,t,n){return C.dir(e,"parentNode",n)},next:function(e){return D(e,"nextSibling")},prev:function(e){return D(e,"previousSibling")},nextAll:function(e){return C.dir(e,"nextSibling")},prevAll:function(e){return C.dir(e,"previousSibling")},nextUntil:function(e,t,n){return C.dir(e,"nextSibling",n)},prevUntil:function(e,t,n){return C.dir(e,"previousSibling",n)},siblings:function(e){return C.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return C.sibling(e.firstChild)},contents:function(e){return C.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:C.merge([],e.childNodes)}},function(i,r){C.fn[i]=function(e,t){var n=C.map(this,r,e);return"Until"!==i.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=C.filter(t,n)),1<this.length&&(N[i]||(n=C.unique(n)),S.test(i)&&(n=n.reverse())),this.pushStack(n)}});var k,j=/\S+/g,A={};function P(){_.addEventListener?(_.removeEventListener("DOMContentLoaded",H,!1),d.removeEventListener("load",H,!1)):(_.detachEvent("onreadystatechange",H),d.detachEvent("onload",H))}function H(){!_.addEventListener&&"load"!==event.type&&"complete"!==_.readyState||(P(),C.ready())}C.Callbacks=function(r){var e,n;r="string"==typeof r?A[r]||(n=A[e=r]={},C.each(e.match(j)||[],function(e,t){n[t]=!0}),n):C.extend({},r);var i,t,o,s,a,l,u=[],c=!r.once&&[],f=function(e){for(t=r.memory&&e,o=!0,a=l||0,l=0,s=u.length,i=!0;u&&a<s;a++)if(!1===u[a].apply(e[0],e[1])&&r.stopOnFalse){t=!1;break}i=!1,u&&(c?c.length&&f(c.shift()):t?u=[]:p.disable())},p={add:function(){if(u){var e=u.length;!function i(e){C.each(e,function(e,t){var n=C.type(t);"function"===n?r.unique&&p.has(t)||u.push(t):t&&t.length&&"string"!==n&&i(t)})}(arguments),i?s=u.length:t&&(l=e,f(t))}return this},remove:function(){return u&&C.each(arguments,function(e,t){for(var n;-1<(n=C.inArray(t,u,n));)u.splice(n,1),i&&(n<=s&&s--,n<=a&&a--)}),this},has:function(e){return e?-1<C.inArray(e,u):!(!u||!u.length)},empty:function(){return u=[],s=0,this},disable:function(){return u=c=t=void 0,this},disabled:function(){return!u},lock:function(){return c=void 0,t||p.disable(),this},locked:function(){return!c},fireWith:function(e,t){return!u||o&&!c||(t=[e,(t=t||[]).slice?t.slice():t],i?c.push(t):f(t)),this},fire:function(){return p.fireWith(this,arguments),this},fired:function(){return!!o}};return p},C.extend({Deferred:function(e){var o=[["resolve","done",C.Callbacks("once memory"),"resolved"],["reject","fail",C.Callbacks("once memory"),"rejected"],["notify","progress",C.Callbacks("memory")]],r="pending",s={state:function(){return r},always:function(){return a.done(arguments).fail(arguments),this},then:function(){var r=arguments;return C.Deferred(function(i){C.each(o,function(e,t){var n=C.isFunction(r[e])&&r[e];a[t[1]](function(){var e=n&&n.apply(this,arguments);e&&C.isFunction(e.promise)?e.promise().done(i.resolve).fail(i.reject).progress(i.notify):i[t[0]+"With"](this===s?i.promise():this,n?[e]:arguments)})}),r=null}).promise()},promise:function(e){return null!=e?C.extend(e,s):s}},a={};return s.pipe=s.then,C.each(o,function(e,t){var n=t[2],i=t[3];s[t[1]]=n.add,i&&n.add(function(){r=i},o[1^e][2].disable,o[2][2].lock),a[t[0]]=function(){return a[t[0]+"With"](this===a?s:this,arguments),this},a[t[0]+"With"]=n.fireWith}),s.promise(a),e&&e.call(a,a),a},when:function(e){function t(t,n,i){return function(e){n[t]=this,i[t]=1<arguments.length?c.call(arguments):e,i===r?u.notifyWith(n,i):--l||u.resolveWith(n,i)}}var r,n,i,o=0,s=c.call(arguments),a=s.length,l=1!==a||e&&C.isFunction(e.promise)?a:0,u=1===l?e:C.Deferred();if(1<a)for(r=new Array(a),n=new Array(a),i=new Array(a);o<a;o++)s[o]&&C.isFunction(s[o].promise)?s[o].promise().done(t(o,i,s)).fail(u.reject).progress(t(o,n,r)):--l;return l||u.resolveWith(i,s),u.promise()}}),C.fn.ready=function(e){return C.ready.promise().done(e),this},C.extend({isReady:!1,readyWait:1,holdReady:function(e){e?C.readyWait++:C.ready(!0)},ready:function(e){if(!0===e?!--C.readyWait:!C.isReady){if(!_.body)return setTimeout(C.ready);(C.isReady=!0)!==e&&0<--C.readyWait||(k.resolveWith(_,[C]),C.fn.triggerHandler&&(C(_).triggerHandler("ready"),C(_).off("ready")))}}}),C.ready.promise=function(e){if(!k)if(k=C.Deferred(),"complete"===_.readyState)setTimeout(C.ready);else if(_.addEventListener)_.addEventListener("DOMContentLoaded",H,!1),d.addEventListener("load",H,!1);else{_.attachEvent("onreadystatechange",H),d.attachEvent("onload",H);var n=!1;try{n=null==d.frameElement&&_.documentElement}catch(e){}n&&n.doScroll&&!function t(){if(!C.isReady){try{n.doScroll("left")}catch(e){return setTimeout(t,50)}P(),C.ready()}}()}return k.promise(e)};var M,L="undefined";for(M in C(v))break;v.ownLast="0"!==M,v.inlineBlockNeedsLayout=!1,C(function(){var e,t,n,i;(n=_.getElementsByTagName("body")[0])&&n.style&&(t=_.createElement("div"),(i=_.createElement("div")).style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(t),typeof t.style.zoom!==L&&(t.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",v.inlineBlockNeedsLayout=e=3===t.offsetWidth,e&&(n.style.zoom=1)),n.removeChild(i))}),function(){var e=_.createElement("div");if(null==v.deleteExpando){v.deleteExpando=!0;try{delete e.test}catch(e){v.deleteExpando=!1}}e=null}(),C.acceptData=function(e){var t=C.noData[(e.nodeName+" ").toLowerCase()],n=+e.nodeType||1;return(1===n||9===n)&&(!t||!0!==t&&e.getAttribute("classid")===t)};var O=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,I=/([A-Z])/g;function F(e,t,n){if(void 0===n&&1===e.nodeType){var i="data-"+t.replace(I,"-$1").toLowerCase();if("string"==typeof(n=e.getAttribute(i))){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:O.test(n)?C.parseJSON(n):n)}catch(e){}C.data(e,t,n)}else n=void 0}return n}function W(e){var t;for(t in e)if(("data"!==t||!C.isEmptyObject(e[t]))&&"toJSON"!==t)return;return 1}function q(e,t,n,i){if(C.acceptData(e)){var r,o,s=C.expando,a=e.nodeType,l=a?C.cache:e,u=a?e[s]:e[s]&&s;if(u&&l[u]&&(i||l[u].data)||void 0!==n||"string"!=typeof t)return l[u=u||(a?e[s]=f.pop()||C.guid++:s)]||(l[u]=a?{}:{toJSON:C.noop}),"object"!=typeof t&&"function"!=typeof t||(i?l[u]=C.extend(l[u],t):l[u].data=C.extend(l[u].data,t)),o=l[u],i||(o.data||(o.data={}),o=o.data),void 0!==n&&(o[C.camelCase(t)]=n),"string"==typeof t?null==(r=o[t])&&(r=o[C.camelCase(t)]):r=o,r}}function R(e,t,n){if(C.acceptData(e)){var i,r,o=e.nodeType,s=o?C.cache:e,a=o?e[C.expando]:C.expando;if(s[a]){if(t&&(i=n?s[a]:s[a].data)){r=(t=C.isArray(t)?t.concat(C.map(t,C.camelCase)):t in i||(t=C.camelCase(t))in i?[t]:t.split(" ")).length;for(;r--;)delete i[t[r]];if(n?!W(i):!C.isEmptyObject(i))return}(n||(delete s[a].data,W(s[a])))&&(o?C.cleanData([e],!0):v.deleteExpando||s!=s.window?delete s[a]:s[a]=null)}}}C.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return!!(e=e.nodeType?C.cache[e[C.expando]]:e[C.expando])&&!W(e)},data:function(e,t,n){return q(e,t,n)},removeData:function(e,t){return R(e,t)},_data:function(e,t,n){return q(e,t,n,!0)},_removeData:function(e,t){return R(e,t,!0)}}),C.fn.extend({data:function(e,t){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0!==e)return"object"==typeof e?this.each(function(){C.data(this,e)}):1<arguments.length?this.each(function(){C.data(this,e,t)}):o?F(o,e,C.data(o,e)):void 0;if(this.length&&(r=C.data(o),1===o.nodeType&&!C._data(o,"parsedAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&F(o,i=C.camelCase(i.slice(5)),r[i]);C._data(o,"parsedAttrs",!0)}return r},removeData:function(e){return this.each(function(){C.removeData(this,e)})}}),C.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=C._data(e,t),n&&(!i||C.isArray(n)?i=C._data(e,t,C.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=C.queue(e,t),i=n.length,r=n.shift(),o=C._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,function(){C.dequeue(e,t)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return C._data(e,n)||C._data(e,n,{empty:C.Callbacks("once memory").add(function(){C._removeData(e,t+"queue"),C._removeData(e,n)})})}}),C.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?C.queue(this[0],t):void 0===n?this:this.each(function(){var e=C.queue(this,t,n);C._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&C.dequeue(this,t)})},dequeue:function(e){return this.each(function(){C.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--r||o.resolveWith(s,[s])}var i,r=1,o=C.Deferred(),s=this,a=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(i=C._data(s[a],e+"queueHooks"))&&i.empty&&(r++,i.empty.add(n));return n(),o.promise(t)}});function $(e,t){return e=t||e,"none"===C.css(e,"display")||!C.contains(e.ownerDocument,e)}var B=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,z=["Top","Right","Bottom","Left"],U=C.access=function(e,t,n,i,r,o,s){var a=0,l=e.length,u=null==n;if("object"===C.type(n))for(a in r=!0,n)C.access(e,t,a,n[a],!0,o,s);else if(void 0!==i&&(r=!0,C.isFunction(i)||(s=!0),u&&(t=s?(t.call(e,i),null):(u=t,function(e,t,n){return u.call(C(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return r?e:u?t.call(e):l?t(e[0],n):o},X=/^(?:checkbox|radio)$/i;!function(){var e=_.createElement("input"),t=_.createElement("div"),n=_.createDocumentFragment();if(t.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",v.leadingWhitespace=3===t.firstChild.nodeType,v.tbody=!t.getElementsByTagName("tbody").length,v.htmlSerialize=!!t.getElementsByTagName("link").length,v.html5Clone="<:nav></:nav>"!==_.createElement("nav").cloneNode(!0).outerHTML,e.type="checkbox",e.checked=!0,n.appendChild(e),v.appendChecked=e.checked,t.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue,n.appendChild(t),t.innerHTML="<input type='radio' checked='checked' name='t'/>",v.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,v.noCloneEvent=!0,t.attachEvent&&(t.attachEvent("onclick",function(){v.noCloneEvent=!1}),t.cloneNode(!0).click()),null==v.deleteExpando){v.deleteExpando=!0;try{delete t.test}catch(e){v.deleteExpando=!1}}}(),function(){var e,t,n=_.createElement("div");for(e in{submit:!0,change:!0,focusin:!0})t="on"+e,(v[e+"Bubbles"]=t in d)||(n.setAttribute(t,"t"),v[e+"Bubbles"]=!1===n.attributes[t].expando);n=null}();var Y=/^(?:input|select|textarea)$/i,Q=/^key/,J=/^(?:mouse|pointer|contextmenu)|click/,V=/^(?:focusinfocus|focusoutblur)$/,G=/^([^.]*)(?:\.(.+)|)$/;function K(){return!0}function Z(){return!1}function ee(){try{return _.activeElement}catch(e){}}function te(e){var t=ne.split("|"),n=e.createDocumentFragment();if(n.createElement)for(;t.length;)n.createElement(t.pop());return n}C.event={global:{},add:function(e,t,n,i,r){var o,s,a,l,u,c,f,p,h,d,g,m=C._data(e);if(m){for(n.handler&&(n=(l=n).handler,r=l.selector),n.guid||(n.guid=C.guid++),(s=m.events)||(s=m.events={}),(c=m.handle)||((c=m.handle=function(e){return typeof C===L||e&&C.event.triggered===e.type?void 0:C.event.dispatch.apply(c.elem,arguments)}).elem=e),a=(t=(t||"").match(j)||[""]).length;a--;)h=g=(o=G.exec(t[a])||[])[1],d=(o[2]||"").split(".").sort(),h&&(u=C.event.special[h]||{},h=(r?u.delegateType:u.bindType)||h,u=C.event.special[h]||{},f=C.extend({type:h,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&C.expr.match.needsContext.test(r),namespace:d.join(".")},l),(p=s[h])||((p=s[h]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(e,i,d,c)||(e.addEventListener?e.addEventListener(h,c,!1):e.attachEvent&&e.attachEvent("on"+h,c))),u.add&&(u.add.call(e,f),f.handler.guid||(f.handler.guid=n.guid)),r?p.splice(p.delegateCount++,0,f):p.push(f),C.event.global[h]=!0);e=null}},remove:function(e,t,n,i,r){var o,s,a,l,u,c,f,p,h,d,g,m=C.hasData(e)&&C._data(e);if(m&&(c=m.events)){for(u=(t=(t||"").match(j)||[""]).length;u--;)if(h=g=(a=G.exec(t[u])||[])[1],d=(a[2]||"").split(".").sort(),h){for(f=C.event.special[h]||{},p=c[h=(i?f.delegateType:f.bindType)||h]||[],a=a[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=o=p.length;o--;)s=p[o],!r&&g!==s.origType||n&&n.guid!==s.guid||a&&!a.test(s.namespace)||i&&i!==s.selector&&("**"!==i||!s.selector)||(p.splice(o,1),s.selector&&p.delegateCount--,f.remove&&f.remove.call(e,s));l&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,d,m.handle)||C.removeEvent(e,h,m.handle),delete c[h])}else for(h in c)C.event.remove(e,h+t[u],n,i,!0);C.isEmptyObject(c)&&(delete m.handle,C._removeData(e,"events"))}},trigger:function(e,t,n,i){var r,o,s,a,l,u,c,f=[n||_],p=m.call(e,"type")?e.type:e,h=m.call(e,"namespace")?e.namespace.split("."):[];if(s=u=n=n||_,3!==n.nodeType&&8!==n.nodeType&&!V.test(p+C.event.triggered)&&(0<=p.indexOf(".")&&(p=(h=p.split(".")).shift(),h.sort()),o=p.indexOf(":")<0&&"on"+p,(e=e[C.expando]?e:new C.Event(p,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=h.join("."),e.namespace_re=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:C.makeArray(t,[e]),l=C.event.special[p]||{},i||!l.trigger||!1!==l.trigger.apply(n,t))){if(!i&&!l.noBubble&&!C.isWindow(n)){for(a=l.delegateType||p,V.test(a+p)||(s=s.parentNode);s;s=s.parentNode)f.push(s),u=s;u===(n.ownerDocument||_)&&f.push(u.defaultView||u.parentWindow||d)}for(c=0;(s=f[c++])&&!e.isPropagationStopped();)e.type=1<c?a:l.bindType||p,(r=(C._data(s,"events")||{})[e.type]&&C._data(s,"handle"))&&r.apply(s,t),(r=o&&s[o])&&r.apply&&C.acceptData(s)&&(e.result=r.apply(s,t),!1===e.result&&e.preventDefault());if(e.type=p,!i&&!e.isDefaultPrevented()&&(!l._default||!1===l._default.apply(f.pop(),t))&&C.acceptData(n)&&o&&n[p]&&!C.isWindow(n)){(u=n[o])&&(n[o]=null),C.event.triggered=p;try{n[p]()}catch(e){}C.event.triggered=void 0,u&&(n[o]=u)}return e.result}},dispatch:function(e){e=C.event.fix(e);var t,n,i,r,o,s,a=c.call(arguments),l=(C._data(this,"events")||{})[e.type]||[],u=C.event.special[e.type]||{};if((a[0]=e).delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,e)){for(s=C.event.handlers.call(this,e,l),t=0;(r=s[t++])&&!e.isPropagationStopped();)for(e.currentTarget=r.elem,o=0;(i=r.handlers[o++])&&!e.isImmediatePropagationStopped();)e.namespace_re&&!e.namespace_re.test(i.namespace)||(e.handleObj=i,e.data=i.data,void 0!==(n=((C.event.special[i.origType]||{}).handle||i.handler).apply(r.elem,a))&&!1===(e.result=n)&&(e.preventDefault(),e.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,i,r,o,s=[],a=t.delegateCount,l=e.target;if(a&&l.nodeType&&(!e.button||"click"!==e.type))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==e.type)){for(r=[],o=0;o<a;o++)void 0===r[n=(i=t[o]).selector+" "]&&(r[n]=i.needsContext?0<=C(n,this).index(l):C.find(n,this,null,[l]).length),r[n]&&r.push(i);r.length&&s.push({elem:l,handlers:r})}return a<t.length&&s.push({elem:this,handlers:t.slice(a)}),s},fix:function(e){if(e[C.expando])return e;var t,n,i,r=e.type,o=e,s=this.fixHooks[r];for(s||(this.fixHooks[r]=s=J.test(r)?this.mouseHooks:Q.test(r)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,e=new C.Event(o),t=i.length;t--;)e[n=i[t]]=o[n];return e.target||(e.target=o.srcElement||_),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,s.filter?s.filter(e,o):e},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,i,r,o=t.button,s=t.fromElement;return null==e.pageX&&null!=t.clientX&&(r=(i=e.target.ownerDocument||_).documentElement,n=i.body,e.pageX=t.clientX+(r&&r.scrollLeft||n&&n.scrollLeft||0)-(r&&r.clientLeft||n&&n.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||n&&n.scrollTop||0)-(r&&r.clientTop||n&&n.clientTop||0)),!e.relatedTarget&&s&&(e.relatedTarget=s===e.target?t.toElement:s),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==ee()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){if(this===ee()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if(C.nodeName(this,"input")&&"checkbox"===this.type&&this.click)return this.click(),!1},_default:function(e){return C.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,i){var r=C.extend(new C.Event,n,{type:e,isSimulated:!0,originalEvent:{}});i?C.event.trigger(r,null,t):C.event.dispatch.call(t,r),r.isDefaultPrevented()&&n.preventDefault()}},C.removeEvent=_.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)}:function(e,t,n){var i="on"+t;e.detachEvent&&(typeof e[i]===L&&(e[i]=null),e.detachEvent(i,n))},C.Event=function(e,t){if(!(this instanceof C.Event))return new C.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?K:Z):this.type=e,t&&C.extend(this,t),this.timeStamp=e&&e.timeStamp||C.now(),this[C.expando]=!0},C.Event.prototype={isDefaultPrevented:Z,isPropagationStopped:Z,isImmediatePropagationStopped:Z,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=K,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=K,e&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=K,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,r){C.event.special[e]={delegateType:r,bindType:r,handle:function(e){var t,n=e.relatedTarget,i=e.handleObj;return n&&(n===this||C.contains(this,n))||(e.type=i.origType,t=i.handler.apply(this,arguments),e.type=r),t}}}),v.submitBubbles||(C.event.special.submit={setup:function(){if(C.nodeName(this,"form"))return!1;C.event.add(this,"click._submit keypress._submit",function(e){var t=e.target,n=C.nodeName(t,"input")||C.nodeName(t,"button")?t.form:void 0;n&&!C._data(n,"submitBubbles")&&(C.event.add(n,"submit._submit",function(e){e._submit_bubble=!0}),C._data(n,"submitBubbles",!0))})},postDispatch:function(e){e._submit_bubble&&(delete e._submit_bubble,this.parentNode&&!e.isTrigger&&C.event.simulate("submit",this.parentNode,e,!0))},teardown:function(){if(C.nodeName(this,"form"))return!1;C.event.remove(this,"._submit")}}),v.changeBubbles||(C.event.special.change={setup:function(){if(Y.test(this.nodeName))return"checkbox"!==this.type&&"radio"!==this.type||(C.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._just_changed=!0)}),C.event.add(this,"click._change",function(e){this._just_changed&&!e.isTrigger&&(this._just_changed=!1),C.event.simulate("change",this,e,!0)})),!1;C.event.add(this,"beforeactivate._change",function(e){var t=e.target;Y.test(t.nodeName)&&!C._data(t,"changeBubbles")&&(C.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||C.event.simulate("change",this.parentNode,e,!0)}),C._data(t,"changeBubbles",!0))})},handle:function(e){var t=e.target;if(this!==t||e.isSimulated||e.isTrigger||"radio"!==t.type&&"checkbox"!==t.type)return e.handleObj.handler.apply(this,arguments)},teardown:function(){return C.event.remove(this,"._change"),!Y.test(this.nodeName)}}),v.focusinBubbles||C.each({focus:"focusin",blur:"focusout"},function(n,i){function r(e){C.event.simulate(i,e.target,C.event.fix(e),!0)}C.event.special[i]={setup:function(){var e=this.ownerDocument||this,t=C._data(e,i);t||e.addEventListener(n,r,!0),C._data(e,i,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=C._data(e,i)-1;t?C._data(e,i,t):(e.removeEventListener(n,r,!0),C._removeData(e,i))}}}),C.fn.extend({on:function(e,t,n,i,r){var o,s;if("object"==typeof e){for(o in"string"!=typeof t&&(n=n||t,t=void 0),e)this.on(o,t,n,e[o],r);return this}if(null==n&&null==i?(i=t,n=t=void 0):null==i&&("string"==typeof t?(i=n,n=void 0):(i=n,n=t,t=void 0)),!1===i)i=Z;else if(!i)return this;return 1===r&&(s=i,(i=function(e){return C().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=C.guid++)),this.each(function(){C.event.add(this,e,i,n,t)})},one:function(e,t,n,i){return this.on(e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,C(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Z),this.each(function(){C.event.remove(this,e,n,t)});for(r in e)this.off(r,t,e[r]);return this},trigger:function(e,t){return this.each(function(){C.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return C.event.trigger(e,t,n,!0)}});var ne="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",ie=/ jQuery\d+="(?:null|\d+)"/g,re=new RegExp("<(?:"+ne+")[\\s/>]","i"),oe=/^\s+/,se=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,ae=/<([\w:]+)/,le=/<tbody/i,ue=/<|&#?\w+;/,ce=/<(?:script|style|link)/i,fe=/checked\s*(?:[^=]|=\s*.checked.)/i,pe=/^$|\/(?:java|ecma)script/i,he=/^true\/(.*)/,de=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ge={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:v.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},me=te(_).appendChild(_.createElement("div"));function ve(e,t){var n,i,r=0,o=typeof e.getElementsByTagName!==L?e.getElementsByTagName(t||"*"):typeof e.querySelectorAll!==L?e.querySelectorAll(t||"*"):void 0;if(!o)for(o=[],n=e.childNodes||e;null!=(i=n[r]);r++)!t||C.nodeName(i,t)?o.push(i):C.merge(o,ve(i,t));return void 0===t||t&&C.nodeName(e,t)?C.merge([e],o):o}function ye(e){X.test(e.type)&&(e.defaultChecked=e.checked)}function be(e,t){return C.nodeName(e,"table")&&C.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function xe(e){return e.type=(null!==C.find.attr(e,"type"))+"/"+e.type,e}function we(e){var t=he.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function Te(e,t){for(var n,i=0;null!=(n=e[i]);i++)C._data(n,"globalEval",!t||C._data(t[i],"globalEval"))}function Ce(e,t){if(1===t.nodeType&&C.hasData(e)){var n,i,r,o=C._data(e),s=C._data(t,o),a=o.events;if(a)for(n in delete s.handle,s.events={},a)for(i=0,r=a[n].length;i<r;i++)C.event.add(t,n,a[n][i]);s.data&&(s.data=C.extend({},s.data))}}function _e(e,t){var n,i,r;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!v.noCloneEvent&&t[C.expando]){for(i in(r=C._data(t)).events)C.removeEvent(t,i,r.handle);t.removeAttribute(C.expando)}"script"===n&&t.text!==e.text?(xe(t).text=e.text,we(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),v.html5Clone&&e.innerHTML&&!C.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&X.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}}ge.optgroup=ge.option,ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td,C.extend({clone:function(e,t,n){var i,r,o,s,a,l=C.contains(e.ownerDocument,e);if(v.html5Clone||C.isXMLDoc(e)||!re.test("<"+e.nodeName+">")?o=e.cloneNode(!0):(me.innerHTML=e.outerHTML,me.removeChild(o=me.firstChild)),!(v.noCloneEvent&&v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||C.isXMLDoc(e)))for(i=ve(o),a=ve(e),s=0;null!=(r=a[s]);++s)i[s]&&_e(r,i[s]);if(t)if(n)for(a=a||ve(e),i=i||ve(o),s=0;null!=(r=a[s]);s++)Ce(r,i[s]);else Ce(e,o);return 0<(i=ve(o,"script")).length&&Te(i,!l&&ve(e,"script")),i=a=r=null,o},buildFragment:function(e,t,n,i){for(var r,o,s,a,l,u,c,f=e.length,p=te(t),h=[],d=0;d<f;d++)if((o=e[d])||0===o)if("object"===C.type(o))C.merge(h,o.nodeType?[o]:o);else if(ue.test(o)){for(a=a||p.appendChild(t.createElement("div")),l=(ae.exec(o)||["",""])[1].toLowerCase(),c=ge[l]||ge._default,a.innerHTML=c[1]+o.replace(se,"<$1></$2>")+c[2],r=c[0];r--;)a=a.lastChild;if(!v.leadingWhitespace&&oe.test(o)&&h.push(t.createTextNode(oe.exec(o)[0])),!v.tbody)for(r=(o="table"!==l||le.test(o)?"<table>"!==c[1]||le.test(o)?0:a:a.firstChild)&&o.childNodes.length;r--;)C.nodeName(u=o.childNodes[r],"tbody")&&!u.childNodes.length&&o.removeChild(u);for(C.merge(h,a.childNodes),a.textContent="";a.firstChild;)a.removeChild(a.firstChild);a=p.lastChild}else h.push(t.createTextNode(o));for(a&&p.removeChild(a),v.appendChecked||C.grep(ve(h,"input"),ye),d=0;o=h[d++];)if((!i||-1===C.inArray(o,i))&&(s=C.contains(o.ownerDocument,o),a=ve(p.appendChild(o),"script"),s&&Te(a),n))for(r=0;o=a[r++];)pe.test(o.type||"")&&n.push(o);return a=null,p},cleanData:function(e,t){for(var n,i,r,o,s=0,a=C.expando,l=C.cache,u=v.deleteExpando,c=C.event.special;null!=(n=e[s]);s++)if((t||C.acceptData(n))&&(o=(r=n[a])&&l[r])){if(o.events)for(i in o.events)c[i]?C.event.remove(n,i):C.removeEvent(n,i,o.handle);l[r]&&(delete l[r],u?delete n[a]:typeof n.removeAttribute!==L?n.removeAttribute(a):n[a]=null,f.push(r))}}}),C.fn.extend({text:function(e){return U(this,function(e){return void 0===e?C.text(this):this.empty().append((this[0]&&this[0].ownerDocument||_).createTextNode(e))},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||be(this,e).appendChild(e)})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=be(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){for(var n,i=e?C.filter(e,this):this,r=0;null!=(n=i[r]);r++)t||1!==n.nodeType||C.cleanData(ve(n)),n.parentNode&&(t&&C.contains(n.ownerDocument,n)&&Te(ve(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var e,t=0;null!=(e=this[t]);t++){for(1===e.nodeType&&C.cleanData(ve(e,!1));e.firstChild;)e.removeChild(e.firstChild);e.options&&C.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return C.clone(this,e,t)})},html:function(e){return U(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e)return 1===t.nodeType?t.innerHTML.replace(ie,""):void 0;if("string"==typeof e&&!ce.test(e)&&(v.htmlSerialize||!re.test(e))&&(v.leadingWhitespace||!oe.test(e))&&!ge[(ae.exec(e)||["",""])[1].toLowerCase()]){e=e.replace(se,"<$1></$2>");try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(C.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var t=arguments[0];return this.domManip(arguments,function(e){t=this.parentNode,C.cleanData(ve(this)),t&&t.replaceChild(e,this)}),t&&(t.length||t.nodeType)?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(n,i){n=g.apply([],n);var e,t,r,o,s,a,l=0,u=this.length,c=this,f=u-1,p=n[0],h=C.isFunction(p);if(h||1<u&&"string"==typeof p&&!v.checkClone&&fe.test(p))return this.each(function(e){var t=c.eq(e);h&&(n[0]=p.call(this,e,t.html())),t.domManip(n,i)});if(u&&(e=(a=C.buildFragment(n,this[0].ownerDocument,!1,this)).firstChild,1===a.childNodes.length&&(a=e),e)){for(r=(o=C.map(ve(a,"script"),xe)).length;l<u;l++)t=a,l!==f&&(t=C.clone(t,!0,!0),r&&C.merge(o,ve(t,"script"))),i.call(this[l],t,l);if(r)for(s=o[o.length-1].ownerDocument,C.map(o,we),l=0;l<r;l++)t=o[l],pe.test(t.type||"")&&!C._data(t,"globalEval")&&C.contains(s,t)&&(t.src?C._evalUrl&&C._evalUrl(t.src):C.globalEval((t.text||t.textContent||t.innerHTML||"").replace(de,"")));a=e=null}return this}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,s){C.fn[e]=function(e){for(var t,n=0,i=[],r=C(e),o=r.length-1;n<=o;n++)t=n===o?this:this.clone(!0),C(r[n])[s](t),a.apply(i,t.get());return this.pushStack(i)}});var Ee,Se,Ne={};function De(e,t){var n,i=C(t.createElement(e)).appendTo(t.body),r=d.getDefaultComputedStyle&&(n=d.getDefaultComputedStyle(i[0]))?n.display:C.css(i[0],"display");return i.detach(),r}function ke(e){var t=_,n=Ne[e];return n||("none"!==(n=De(e,t))&&n||((t=((Ee=(Ee||C("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement))[0].contentWindow||Ee[0].contentDocument).document).write(),t.close(),n=De(e,t),Ee.detach()),Ne[e]=n),n}v.shrinkWrapBlocks=function(){return null!=Se?Se:(Se=!1,(t=_.getElementsByTagName("body")[0])&&t.style?(e=_.createElement("div"),(n=_.createElement("div")).style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",t.appendChild(n).appendChild(e),typeof e.style.zoom!==L&&(e.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",e.appendChild(_.createElement("div")).style.width="5px",Se=3!==e.offsetWidth),t.removeChild(n),Se):void 0);var e,t,n};var je,Ae,Pe,He,Me,Le,Oe,Ie,Fe,We=/^margin/,qe=new RegExp("^("+B+")(?!px)[a-z%]+$","i"),Re=/^(top|right|bottom|left)$/;function $e(t,n){return{get:function(){var e=t();if(null!=e){if(!e)return(this.get=n).apply(this,arguments);delete this.get}}}}function Be(){var e,t,n,i;(t=_.getElementsByTagName("body")[0])&&t.style&&(e=_.createElement("div"),(n=_.createElement("div")).style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",t.appendChild(n).appendChild(e),e.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",Le=Oe=!1,Fe=!0,d.getComputedStyle&&(Le="1%"!==(d.getComputedStyle(e,null)||{}).top,Oe="4px"===(d.getComputedStyle(e,null)||{width:"4px"}).width,(i=e.appendChild(_.createElement("div"))).style.cssText=e.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",i.style.marginRight=i.style.width="0",e.style.width="1px",Fe=!parseFloat((d.getComputedStyle(i,null)||{}).marginRight),e.removeChild(i)),e.innerHTML="<table><tr><td></td><td>t</td></tr></table>",(i=e.getElementsByTagName("td"))[0].style.cssText="margin:0;border:0;padding:0;display:none",(Ie=0===i[0].offsetHeight)&&(i[0].style.display="",i[1].style.display="none",Ie=0===i[0].offsetHeight),t.removeChild(n))}d.getComputedStyle?(je=function(e){return e.ownerDocument.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):d.getComputedStyle(e,null)},Ae=function(e,t,n){var i,r,o,s,a=e.style;return s=(n=n||je(e))?n.getPropertyValue(t)||n[t]:void 0,n&&(""!==s||C.contains(e.ownerDocument,e)||(s=C.style(e,t)),qe.test(s)&&We.test(t)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0===s?s:s+""}):_.documentElement.currentStyle&&(je=function(e){return e.currentStyle},Ae=function(e,t,n){var i,r,o,s,a=e.style;return null==(s=(n=n||je(e))?n[t]:void 0)&&a&&a[t]&&(s=a[t]),qe.test(s)&&!Re.test(t)&&(i=a.left,(o=(r=e.runtimeStyle)&&r.left)&&(r.left=e.currentStyle.left),a.left="fontSize"===t?"1em":s,s=a.pixelLeft+"px",a.left=i,o&&(r.left=o)),void 0===s?s:s+""||"auto"}),(Pe=_.createElement("div")).innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",(He=(Me=Pe.getElementsByTagName("a")[0])&&Me.style)&&(He.cssText="float:left;opacity:.5",v.opacity="0.5"===He.opacity,v.cssFloat=!!He.cssFloat,Pe.style.backgroundClip="content-box",Pe.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===Pe.style.backgroundClip,v.boxSizing=""===He.boxSizing||""===He.MozBoxSizing||""===He.WebkitBoxSizing,C.extend(v,{reliableHiddenOffsets:function(){return null==Ie&&Be(),Ie},boxSizingReliable:function(){return null==Oe&&Be(),Oe},pixelPosition:function(){return null==Le&&Be(),Le},reliableMarginRight:function(){return null==Fe&&Be(),Fe}})),C.swap=function(e,t,n,i){var r,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];for(o in r=n.apply(e,i||[]),t)e.style[o]=s[o];return r};var ze=/alpha\([^)]*\)/i,Ue=/opacity\s*=\s*([^)]*)/,Xe=/^(none|table(?!-c[ea]).+)/,Ye=new RegExp("^("+B+")(.*)$","i"),Qe=new RegExp("^([+-])=("+B+")","i"),Je={position:"absolute",visibility:"hidden",display:"block"},Ve={letterSpacing:"0",fontWeight:"400"},Ge=["Webkit","O","Moz","ms"];function Ke(e,t){if(t in e)return t;for(var n=t.charAt(0).toUpperCase()+t.slice(1),i=t,r=Ge.length;r--;)if((t=Ge[r]+n)in e)return t;return i}function Ze(e,t){for(var n,i,r,o=[],s=0,a=e.length;s<a;s++)(i=e[s]).style&&(o[s]=C._data(i,"olddisplay"),n=i.style.display,t?(o[s]||"none"!==n||(i.style.display=""),""===i.style.display&&$(i)&&(o[s]=C._data(i,"olddisplay",ke(i.nodeName)))):(r=$(i),(n&&"none"!==n||!r)&&C._data(i,"olddisplay",r?n:C.css(i,"display"))));for(s=0;s<a;s++)(i=e[s]).style&&(t&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=t?o[s]||"":"none"));return e}function et(e,t,n){var i=Ye.exec(t);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):t}function tt(e,t,n,i,r){for(var o=n===(i?"border":"content")?4:"width"===t?1:0,s=0;o<4;o+=2)"margin"===n&&(s+=C.css(e,n+z[o],!0,r)),i?("content"===n&&(s-=C.css(e,"padding"+z[o],!0,r)),"margin"!==n&&(s-=C.css(e,"border"+z[o]+"Width",!0,r))):(s+=C.css(e,"padding"+z[o],!0,r),"padding"!==n&&(s+=C.css(e,"border"+z[o]+"Width",!0,r)));return s}function nt(e,t,n){var i=!0,r="width"===t?e.offsetWidth:e.offsetHeight,o=je(e),s=v.boxSizing&&"border-box"===C.css(e,"boxSizing",!1,o);if(r<=0||null==r){if(((r=Ae(e,t,o))<0||null==r)&&(r=e.style[t]),qe.test(r))return r;i=s&&(v.boxSizingReliable()||r===e.style[t]),r=parseFloat(r)||0}return r+tt(e,t,n||(s?"border":"content"),i,o)+"px"}function it(e,t,n,i,r){return new it.prototype.init(e,t,n,i,r)}C.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ae(e,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:v.cssFloat?"cssFloat":"styleFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,s,a=C.camelCase(t),l=e.style;if(t=C.cssProps[a]||(C.cssProps[a]=Ke(l,a)),s=C.cssHooks[t]||C.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,i))?r:l[t];if("string"===(o=typeof n)&&(r=Qe.exec(n))&&(n=(r[1]+1)*r[2]+parseFloat(C.css(e,t)),o="number"),null!=n&&n==n&&("number"!==o||C.cssNumber[a]||(n+="px"),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),!(s&&"set"in s&&void 0===(n=s.set(e,n,i)))))try{l[t]=n}catch(e){}}},css:function(e,t,n,i){var r,o,s,a=C.camelCase(t);return t=C.cssProps[a]||(C.cssProps[a]=Ke(e.style,a)),(s=C.cssHooks[t]||C.cssHooks[a])&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=Ae(e,t,i)),"normal"===o&&t in Ve&&(o=Ve[t]),""===n||n?(r=parseFloat(o),!0===n||C.isNumeric(r)?r||0:o):o}}),C.each(["height","width"],function(e,r){C.cssHooks[r]={get:function(e,t,n){if(t)return Xe.test(C.css(e,"display"))&&0===e.offsetWidth?C.swap(e,Je,function(){return nt(e,r,n)}):nt(e,r,n)},set:function(e,t,n){var i=n&&je(e);return et(0,t,n?tt(e,r,n,v.boxSizing&&"border-box"===C.css(e,"boxSizing",!1,i),i):0)}}}),v.opacity||(C.cssHooks.opacity={get:function(e,t){return Ue.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,i=e.currentStyle,r=C.isNumeric(t)?"alpha(opacity="+100*t+")":"",o=i&&i.filter||n.filter||"";((n.zoom=1)<=t||""===t)&&""===C.trim(o.replace(ze,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||i&&!i.filter)||(n.filter=ze.test(o)?o.replace(ze,r):o+" "+r)}}),C.cssHooks.marginRight=$e(v.reliableMarginRight,function(e,t){if(t)return C.swap(e,{display:"inline-block"},Ae,[e,"marginRight"])}),C.each({margin:"",padding:"",border:"Width"},function(r,o){C.cssHooks[r+o]={expand:function(e){for(var t=0,n={},i="string"==typeof e?e.split(" "):[e];t<4;t++)n[r+z[t]+o]=i[t]||i[t-2]||i[0];return n}},We.test(r)||(C.cssHooks[r+o].set=et)}),C.fn.extend({css:function(e,t){return U(this,function(e,t,n){var i,r,o={},s=0;if(C.isArray(t)){for(i=je(e),r=t.length;s<r;s++)o[t[s]]=C.css(e,t[s],!1,i);return o}return void 0!==n?C.style(e,t,n):C.css(e,t)},e,t,1<arguments.length)},show:function(){return Ze(this,!0)},hide:function(){return Ze(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){$(this)?C(this).show():C(this).hide()})}}),((C.Tween=it).prototype={constructor:it,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||"swing",this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(C.cssNumber[n]?"":"px")},cur:function(){var e=it.propHooks[this.prop];return e&&e.get?e.get(this):it.propHooks._default.get(this)},run:function(e){var t,n=it.propHooks[this.prop];return this.options.duration?this.pos=t=C.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):it.propHooks._default.set(this),this}}).init.prototype=it.prototype,(it.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=C.css(e.elem,e.prop,""))&&"auto"!==t?t:0:e.elem[e.prop]},set:function(e){C.fx.step[e.prop]?C.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[C.cssProps[e.prop]]||C.cssHooks[e.prop])?C.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}}).scrollTop=it.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},C.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},C.fx=it.prototype.init,C.fx.step={};var rt,ot,st,at,lt,ut,ct,ft=/^(?:toggle|show|hide)$/,pt=new RegExp("^(?:([+-])=|)("+B+")([a-z%]*)$","i"),ht=/queueHooks$/,dt=[function(t,e,n){var i,r,o,s,a,l,u,c=this,f={},p=t.style,h=t.nodeType&&$(t),d=C._data(t,"fxshow");n.queue||(null==(a=C._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,c.always(function(){c.always(function(){a.unqueued--,C.queue(t,"fx").length||a.empty.fire()})}));1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],u=C.css(t,"display"),"inline"===("none"===u?C._data(t,"olddisplay")||ke(t.nodeName):u)&&"none"===C.css(t,"float")&&(v.inlineBlockNeedsLayout&&"inline"!==ke(t.nodeName)?p.zoom=1:p.display="inline-block"));n.overflow&&(p.overflow="hidden",v.shrinkWrapBlocks()||c.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(i in e)if(r=e[i],ft.exec(r)){if(delete e[i],o=o||"toggle"===r,r===(h?"hide":"show")){if("show"!==r||!d||void 0===d[i])continue;h=!0}f[i]=d&&d[i]||C.style(t,i)}else u=void 0;if(C.isEmptyObject(f))"inline"===("none"===u?ke(t.nodeName):u)&&(p.display=u);else for(i in d?"hidden"in d&&(h=d.hidden):d=C._data(t,"fxshow",{}),o&&(d.hidden=!h),h?C(t).show():c.done(function(){C(t).hide()}),c.done(function(){var e;for(e in C._removeData(t,"fxshow"),f)C.style(t,e,f[e])}),f)s=yt(h?d[i]:0,i,c),i in d||(d[i]=s.start,h&&(s.end=s.start,s.start="width"===i||"height"===i?1:0))}],gt={"*":[function(e,t){var n=this.createTween(e,t),i=n.cur(),r=pt.exec(t),o=r&&r[3]||(C.cssNumber[e]?"":"px"),s=(C.cssNumber[e]||"px"!==o&&+i)&&pt.exec(C.css(n.elem,e)),a=1,l=20;if(s&&s[3]!==o)for(o=o||s[3],r=r||[],s=+i||1;s/=a=a||".5",C.style(n.elem,e,s+o),a!==(a=n.cur()/i)&&1!==a&&--l;);return r&&(s=n.start=+s||+i||0,n.unit=o,n.end=r[1]?s+(r[1]+1)*r[2]:+r[2]),n}]};function mt(){return setTimeout(function(){rt=void 0}),rt=C.now()}function vt(e,t){var n,i={height:e},r=0;for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=z[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function yt(e,t,n){for(var i,r=(gt[t]||[]).concat(gt["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,t,e))return i}function bt(o,e,t){var n,s,i=0,r=dt.length,a=C.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var e=rt||mt(),t=Math.max(0,u.startTime+u.duration-e),n=1-(t/u.duration||0),i=0,r=u.tweens.length;i<r;i++)u.tweens[i].run(n);return a.notifyWith(o,[u,n,t]),n<1&&r?t:(a.resolveWith(o,[u]),!1)},u=a.promise({elem:o,props:C.extend({},e),opts:C.extend(!0,{specialEasing:{}},t),originalProperties:e,originalOptions:t,startTime:rt||mt(),duration:t.duration,tweens:[],createTween:function(e,t){var n=C.Tween(o,u.opts,e,t,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(n),n},stop:function(e){var t=0,n=e?u.tweens.length:0;if(s)return this;for(s=!0;t<n;t++)u.tweens[t].run(1);return e?a.resolveWith(o,[u,e]):a.rejectWith(o,[u,e]),this}}),c=u.props;for(!function(e,t){var n,i,r,o,s;for(n in e)if(r=t[i=C.camelCase(n)],o=e[n],C.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(s=C.cssHooks[i])&&"expand"in s)for(n in o=s.expand(o),delete e[i],o)n in e||(e[n]=o[n],t[n]=r);else t[i]=r}(c,u.opts.specialEasing);i<r;i++)if(n=dt[i].call(u,o,c,u.opts))return n;return C.map(c,yt,u),C.isFunction(u.opts.start)&&u.opts.start.call(o,u),C.fx.timer(C.extend(l,{elem:o,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}C.Animation=C.extend(bt,{tweener:function(e,t){for(var n,i=0,r=(e=C.isFunction(e)?(t=e,["*"]):e.split(" ")).length;i<r;i++)n=e[i],gt[n]=gt[n]||[],gt[n].unshift(t)},prefilter:function(e,t){t?dt.unshift(e):dt.push(e)}}),C.speed=function(e,t,n){var i=e&&"object"==typeof e?C.extend({},e):{complete:n||!n&&t||C.isFunction(e)&&e,duration:e,easing:n&&t||t&&!C.isFunction(t)&&t};return i.duration=C.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in C.fx.speeds?C.fx.speeds[i.duration]:C.fx.speeds._default,null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){C.isFunction(i.old)&&i.old.call(this),i.queue&&C.dequeue(this,i.queue)},i},C.fn.extend({fadeTo:function(e,t,n,i){return this.filter($).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(t,e,n,i){function r(){var e=bt(this,C.extend({},t),s);(o||C._data(this,"finish"))&&e.stop(!0)}var o=C.isEmptyObject(t),s=C.speed(e,n,i);return r.finish=r,o||!1===s.queue?this.each(r):this.queue(s.queue,r)},stop:function(r,e,o){function s(e){var t=e.stop;delete e.stop,t(o)}return"string"!=typeof r&&(o=e,e=r,r=void 0),e&&!1!==r&&this.queue(r||"fx",[]),this.each(function(){var e=!0,t=null!=r&&r+"queueHooks",n=C.timers,i=C._data(this);if(t)i[t]&&i[t].stop&&s(i[t]);else for(t in i)i[t]&&i[t].stop&&ht.test(t)&&s(i[t]);for(t=n.length;t--;)n[t].elem!==this||null!=r&&n[t].queue!==r||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||C.dequeue(this,r)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var e,t=C._data(this),n=t[s+"queue"],i=t[s+"queueHooks"],r=C.timers,o=n?n.length:0;for(t.finish=!0,C.queue(this,s,[]),i&&i.stop&&i.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===s&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),C.each(["toggle","show","hide"],function(e,i){var r=C.fn[i];C.fn[i]=function(e,t,n){return null==e||"boolean"==typeof e?r.apply(this,arguments):this.animate(vt(i,!0),e,t,n)}}),C.each({slideDown:vt("show"),slideUp:vt("hide"),slideToggle:vt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,i){C.fn[e]=function(e,t,n){return this.animate(i,e,t,n)}}),C.timers=[],C.fx.tick=function(){var e,t=C.timers,n=0;for(rt=C.now();n<t.length;n++)(e=t[n])()||t[n]!==e||t.splice(n--,1);t.length||C.fx.stop(),rt=void 0},C.fx.timer=function(e){C.timers.push(e),e()?C.fx.start():C.timers.pop()},C.fx.interval=13,C.fx.start=function(){ot=ot||setInterval(C.fx.tick,C.fx.interval)},C.fx.stop=function(){clearInterval(ot),ot=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(i,e){return i=C.fx&&C.fx.speeds[i]||i,e=e||"fx",this.queue(e,function(e,t){var n=setTimeout(e,i);t.stop=function(){clearTimeout(n)}})},(at=_.createElement("div")).setAttribute("className","t"),at.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",ut=at.getElementsByTagName("a")[0],ct=(lt=_.createElement("select")).appendChild(_.createElement("option")),st=at.getElementsByTagName("input")[0],ut.style.cssText="top:1px",v.getSetAttribute="t"!==at.className,v.style=/top/.test(ut.getAttribute("style")),v.hrefNormalized="/a"===ut.getAttribute("href"),v.checkOn=!!st.value,v.optSelected=ct.selected,v.enctype=!!_.createElement("form").enctype,lt.disabled=!0,v.optDisabled=!ct.disabled,(st=_.createElement("input")).setAttribute("value",""),v.input=""===st.getAttribute("value"),st.value="t",st.setAttribute("type","radio"),v.radioValue="t"===st.value;var xt=/\r/g;C.fn.extend({val:function(n){var i,e,r,t=this[0];return arguments.length?(r=C.isFunction(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=r?n.call(this,e,C(this).val()):n)?t="":"number"==typeof t?t+="":C.isArray(t)&&(t=C.map(t,function(e){return null==e?"":e+""})),(i=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in i&&void 0!==i.set(this,t,"value")||(this.value=t))})):t?(i=C.valHooks[t.type]||C.valHooks[t.nodeName.toLowerCase()])&&"get"in i&&void 0!==(e=i.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(xt,""):null==e?"":e:void 0}}),C.extend({valHooks:{option:{get:function(e){var t=C.find.attr(e,"value");return null!=t?t:C.trim(C.text(e))}},select:{get:function(e){for(var t,n,i=e.options,r=e.selectedIndex,o="select-one"===e.type||r<0,s=o?null:[],a=o?r+1:i.length,l=r<0?a:o?r:0;l<a;l++)if(((n=i[l]).selected||l===r)&&(v.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!C.nodeName(n.parentNode,"optgroup"))){if(t=C(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,i,r=e.options,o=C.makeArray(t),s=r.length;s--;)if(i=r[s],0<=C.inArray(C.valHooks.option.get(i),o))try{i.selected=n=!0}catch(e){i.scrollHeight}else i.selected=!1;return n||(e.selectedIndex=-1),r}}}}),C.each(["radio","checkbox"],function(){C.valHooks[this]={set:function(e,t){if(C.isArray(t))return e.checked=0<=C.inArray(C(e).val(),t)}},v.checkOn||(C.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var wt,Tt,Ct=C.expr.attrHandle,_t=/^(?:checked|selected)$/i,Et=v.getSetAttribute,St=v.input;C.fn.extend({attr:function(e,t){return U(this,C.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){C.removeAttr(this,e)})}}),C.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(e&&3!==o&&8!==o&&2!==o)return typeof e.getAttribute===L?C.prop(e,t,n):(1===o&&C.isXMLDoc(e)||(t=t.toLowerCase(),i=C.attrHooks[t]||(C.expr.match.bool.test(t)?Tt:wt)),void 0===n?!(i&&"get"in i&&null!==(r=i.get(e,t)))&&null==(r=C.find.attr(e,t))?void 0:r:null!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):void C.removeAttr(e,t))},removeAttr:function(e,t){var n,i,r=0,o=t&&t.match(j);if(o&&1===e.nodeType)for(;n=o[r++];)i=C.propFix[n]||n,C.expr.match.bool.test(n)?St&&Et||!_t.test(n)?e[i]=!1:e[C.camelCase("default-"+n)]=e[i]=!1:C.attr(e,n,""),e.removeAttribute(Et?n:i)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&C.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}}}),Tt={set:function(e,t,n){return!1===t?C.removeAttr(e,n):St&&Et||!_t.test(n)?e.setAttribute(!Et&&C.propFix[n]||n,n):e[C.camelCase("default-"+n)]=e[n]=!0,n}},C.each(C.expr.match.bool.source.match(/\w+/g),function(e,t){var o=Ct[t]||C.find.attr;Ct[t]=St&&Et||!_t.test(t)?function(e,t,n){var i,r;return n||(r=Ct[t],Ct[t]=i,i=null!=o(e,t,n)?t.toLowerCase():null,Ct[t]=r),i}:function(e,t,n){if(!n)return e[C.camelCase("default-"+t)]?t.toLowerCase():null}}),St&&Et||(C.attrHooks.value={set:function(e,t,n){if(!C.nodeName(e,"input"))return wt&&wt.set(e,t,n);e.defaultValue=t}}),Et||(wt={set:function(e,t,n){var i=e.getAttributeNode(n);if(i||e.setAttributeNode(i=e.ownerDocument.createAttribute(n)),i.value=t+="","value"===n||t===e.getAttribute(n))return t}},Ct.id=Ct.name=Ct.coords=function(e,t,n){var i;if(!n)return(i=e.getAttributeNode(t))&&""!==i.value?i.value:null},C.valHooks.button={get:function(e,t){var n=e.getAttributeNode(t);if(n&&n.specified)return n.value},set:wt.set},C.attrHooks.contenteditable={set:function(e,t,n){wt.set(e,""!==t&&t,n)}},C.each(["width","height"],function(e,n){C.attrHooks[n]={set:function(e,t){if(""===t)return e.setAttribute(n,"auto"),t}}})),v.style||(C.attrHooks.style={get:function(e){return e.style.cssText||void 0},set:function(e,t){return e.style.cssText=t+""}});var Nt=/^(?:input|select|textarea|button|object)$/i,Dt=/^(?:a|area)$/i;C.fn.extend({prop:function(e,t){return U(this,C.prop,e,t,1<arguments.length)},removeProp:function(e){return e=C.propFix[e]||e,this.each(function(){try{this[e]=void 0,delete this[e]}catch(e){}})}}),C.extend({propFix:{for:"htmlFor",class:"className"},prop:function(e,t,n){var i,r,o=e.nodeType;if(e&&3!==o&&8!==o&&2!==o)return(1!==o||!C.isXMLDoc(e))&&(t=C.propFix[t]||t,r=C.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=C.find.attr(e,"tabindex");return t?parseInt(t,10):Nt.test(e.nodeName)||Dt.test(e.nodeName)&&e.href?0:-1}}}}),v.hrefNormalized||C.each(["href","src"],function(e,t){C.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),v.optSelected||(C.propHooks.selected={get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){C.propFix[this.toLowerCase()]=this}),v.enctype||(C.propFix.enctype="encoding");var kt=/[\t\r\n\f]/g;C.fn.extend({addClass:function(t){var e,n,i,r,o,s,a=0,l=this.length,u="string"==typeof t&&t;if(C.isFunction(t))return this.each(function(e){C(this).addClass(t.call(this,e,this.className))});if(u)for(e=(t||"").match(j)||[];a<l;a++)if(i=1===(n=this[a]).nodeType&&(n.className?(" "+n.className+" ").replace(kt," "):" ")){for(o=0;r=e[o++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");s=C.trim(i),n.className!==s&&(n.className=s)}return this},removeClass:function(t){var e,n,i,r,o,s,a=0,l=this.length,u=0===arguments.length||"string"==typeof t&&t;if(C.isFunction(t))return this.each(function(e){C(this).removeClass(t.call(this,e,this.className))});if(u)for(e=(t||"").match(j)||[];a<l;a++)if(i=1===(n=this[a]).nodeType&&(n.className?(" "+n.className+" ").replace(kt," "):"")){for(o=0;r=e[o++];)for(;0<=i.indexOf(" "+r+" ");)i=i.replace(" "+r+" "," ");s=t?C.trim(i):"",n.className!==s&&(n.className=s)}return this},toggleClass:function(r,t){var o=typeof r;return"boolean"==typeof t&&"string"==o?t?this.addClass(r):this.removeClass(r):C.isFunction(r)?this.each(function(e){C(this).toggleClass(r.call(this,e,this.className,t),t)}):this.each(function(){if("string"==o)for(var e,t=0,n=C(this),i=r.match(j)||[];e=i[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else o!==L&&"boolean"!=o||(this.className&&C._data(this,"__className__",this.className),this.className=!this.className&&!1!==r&&C._data(this,"__className__")||"")})},hasClass:function(e){for(var t=" "+e+" ",n=0,i=this.length;n<i;n++)if(1===this[n].nodeType&&0<=(" "+this[n].className+" ").replace(kt," ").indexOf(t))return!0;return!1}}),C.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,n){C.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),C.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}});var jt=C.now(),At=/\?/,Pt=/^[\],:{}\s]*$/,Ht=/(?:^|:|,)(?:\s*\[)+/g,Mt=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,Lt=/"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g;C.parseJSON=function(e){return d.JSON&&d.JSON.parse?d.JSON.parse(e):null===e?e:"string"==typeof e&&(e=C.trim(e))&&Pt.test(e.replace(Mt,"@").replace(Lt,"]").replace(Ht,""))?new Function("return "+e)():void C.error("Invalid JSON: "+e)},C.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{d.DOMParser?t=(new DOMParser).parseFromString(e,"text/xml"):((t=new ActiveXObject("Microsoft.XMLDOM")).async="false",t.loadXML(e))}catch(e){t=void 0}return t&&t.documentElement&&!t.getElementsByTagName("parsererror").length||C.error("Invalid XML: "+e),t};var Ot,It,Ft=/#.*$/,Wt=/([?&])_=[^&]*/,qt=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Rt=/^(?:GET|HEAD)$/,$t=/^\/\//,Bt=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,zt={},Ut={},Xt="*/".concat("*");try{It=location.href}catch(e){(It=_.createElement("a")).href="",It=It.href}function Yt(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,i=0,r=e.toLowerCase().match(j)||[];if(C.isFunction(t))for(;n=r[i++];)"+"===n.charAt(0)?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function Qt(t,r,o,s){var a={},l=t===Ut;function u(e){var i;return a[e]=!0,C.each(t[e]||[],function(e,t){var n=t(r,o,s);return"string"!=typeof n||l||a[n]?l?!(i=n):void 0:(r.dataTypes.unshift(n),u(n),!1)}),i}return u(r.dataTypes[0])||!a["*"]&&u("*")}function Jt(e,t){var n,i,r=C.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((r[i]?e:n=n||{})[i]=t[i]);return n&&C.extend(!0,e,n),e}Ot=Bt.exec(It.toLowerCase())||[],C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:It,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ot[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Xt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":C.parseJSON,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Jt(Jt(e,C.ajaxSettings),t):Jt(C.ajaxSettings,e)},ajaxPrefilter:Yt(zt),ajaxTransport:Yt(Ut),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,i,c,f,p,h,d,r,g=C.ajaxSetup({},t),m=g.context||g,v=g.context&&(m.nodeType||m.jquery)?C(m):C.event,y=C.Deferred(),b=C.Callbacks("once memory"),x=g.statusCode||{},o={},s={},w=0,a="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(2===w){if(!r)for(r={};t=qt.exec(f);)r[t[1].toLowerCase()]=t[2];t=r[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===w?f:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return w||(e=s[n]=s[n]||e,o[e]=t),this},overrideMimeType:function(e){return w||(g.mimeType=e),this},statusCode:function(e){var t;if(e)if(w<2)for(t in e)x[t]=[x[t],e[t]];else T.always(e[T.status]);return this},abort:function(e){var t=e||a;return d&&d.abort(t),l(0,t),this}};if(y.promise(T).complete=b.add,T.success=T.done,T.error=T.fail,g.url=((e||g.url||It)+"").replace(Ft,"").replace($t,Ot[1]+"//"),g.type=t.method||t.type||g.method||g.type,g.dataTypes=C.trim(g.dataType||"*").toLowerCase().match(j)||[""],null==g.crossDomain&&(n=Bt.exec(g.url.toLowerCase()),g.crossDomain=!(!n||n[1]===Ot[1]&&n[2]===Ot[2]&&(n[3]||("http:"===n[1]?"80":"443"))===(Ot[3]||("http:"===Ot[1]?"80":"443")))),g.data&&g.processData&&"string"!=typeof g.data&&(g.data=C.param(g.data,g.traditional)),Qt(zt,g,t,T),2===w)return T;for(i in(h=C.event&&g.global)&&0==C.active++&&C.event.trigger("ajaxStart"),g.type=g.type.toUpperCase(),g.hasContent=!Rt.test(g.type),c=g.url,g.hasContent||(g.data&&(c=g.url+=(At.test(c)?"&":"?")+g.data,delete g.data),!1===g.cache&&(g.url=Wt.test(c)?c.replace(Wt,"$1_="+jt++):c+(At.test(c)?"&":"?")+"_="+jt++)),g.ifModified&&(C.lastModified[c]&&T.setRequestHeader("If-Modified-Since",C.lastModified[c]),C.etag[c]&&T.setRequestHeader("If-None-Match",C.etag[c])),(g.data&&g.hasContent&&!1!==g.contentType||t.contentType)&&T.setRequestHeader("Content-Type",g.contentType),T.setRequestHeader("Accept",g.dataTypes[0]&&g.accepts[g.dataTypes[0]]?g.accepts[g.dataTypes[0]]+("*"!==g.dataTypes[0]?", "+Xt+"; q=0.01":""):g.accepts["*"]),g.headers)T.setRequestHeader(i,g.headers[i]);if(g.beforeSend&&(!1===g.beforeSend.call(m,T,g)||2===w))return T.abort();for(i in a="abort",{success:1,error:1,complete:1})T[i](g[i]);if(d=Qt(Ut,g,t,T)){T.readyState=1,h&&v.trigger("ajaxSend",[T,g]),g.async&&0<g.timeout&&(p=setTimeout(function(){T.abort("timeout")},g.timeout));try{w=1,d.send(o,l)}catch(e){if(!(w<2))throw e;l(-1,e)}}else l(-1,"No Transport");function l(e,t,n,i){var r,o,s,a,l,u=t;2!==w&&(w=2,p&&clearTimeout(p),d=void 0,f=i||"",T.readyState=0<e?4:0,r=200<=e&&e<300||304===e,n&&(a=function(e,t,n){for(var i,r,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(s in a)if(a[s]&&a[s].test(r)){l.unshift(s);break}if(l[0]in n)o=l[0];else{for(s in n){if(!l[0]||e.converters[s+" "+l[0]]){o=s;break}i=i||s}o=o||i}if(o)return o!==l[0]&&l.unshift(o),n[o]}(g,T,n)),a=function(e,t,n,i){var r,o,s,a,l,u={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=u[l+" "+o]||u["* "+o]))for(r in u)if((a=r.split(" "))[1]===o&&(s=u[l+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[r]:!0!==u[r]&&(o=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(g,a,T,r),r?(g.ifModified&&((l=T.getResponseHeader("Last-Modified"))&&(C.lastModified[c]=l),(l=T.getResponseHeader("etag"))&&(C.etag[c]=l)),204===e||"HEAD"===g.type?u="nocontent":304===e?u="notmodified":(u=a.state,o=a.data,r=!(s=a.error))):(s=u,!e&&u||(u="error",e<0&&(e=0))),T.status=e,T.statusText=(t||u)+"",r?y.resolveWith(m,[o,u,T]):y.rejectWith(m,[T,u,s]),T.statusCode(x),x=void 0,h&&v.trigger(r?"ajaxSuccess":"ajaxError",[T,g,r?o:s]),b.fireWith(m,[T,u]),h&&(v.trigger("ajaxComplete",[T,g]),--C.active||C.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return C.get(e,t,n,"json")},getScript:function(e,t){return C.get(e,void 0,t,"script")}}),C.each(["get","post"],function(e,r){C[r]=function(e,t,n,i){return C.isFunction(t)&&(i=i||n,n=t,t=void 0),C.ajax({url:e,type:r,dataType:i,data:t,success:n})}}),C._evalUrl=function(e){return C.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},C.fn.extend({wrapAll:function(t){if(C.isFunction(t))return this.each(function(e){C(this).wrapAll(t.call(this,e))});if(this[0]){var e=C(t,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var e=this;e.firstChild&&1===e.firstChild.nodeType;)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(n){return C.isFunction(n)?this.each(function(e){C(this).wrapInner(n.call(this,e))}):this.each(function(){var e=C(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=C.isFunction(t);return this.each(function(e){C(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(){return this.parent().each(function(){C.nodeName(this,"body")||C(this).replaceWith(this.childNodes)}).end()}}),C.expr.filters.hidden=function(e){return e.offsetWidth<=0&&e.offsetHeight<=0||!v.reliableHiddenOffsets()&&"none"===(e.style&&e.style.display||C.css(e,"display"))},C.expr.filters.visible=function(e){return!C.expr.filters.hidden(e)};var Vt=/%20/g,Gt=/\[\]$/,Kt=/\r?\n/g,Zt=/^(?:submit|button|image|reset|file)$/i,en=/^(?:input|select|textarea|keygen)/i;function tn(n,e,i,r){var t;if(C.isArray(e))C.each(e,function(e,t){i||Gt.test(n)?r(n,t):tn(n+"["+("object"==typeof t?e:"")+"]",t,i,r)});else if(i||"object"!==C.type(e))r(n,e);else for(t in e)tn(n+"["+t+"]",e[t],i,r)}C.param=function(e,t){function n(e,t){t=C.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)}var i,r=[];if(void 0===t&&(t=C.ajaxSettings&&C.ajaxSettings.traditional),C.isArray(e)||e.jquery&&!C.isPlainObject(e))C.each(e,function(){n(this.name,this.value)});else for(i in e)tn(i,e[i],t,n);return r.join("&").replace(Vt,"+")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=C.prop(this,"elements");return e?C.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!C(this).is(":disabled")&&en.test(this.nodeName)&&!Zt.test(e)&&(this.checked||!X.test(e))}).map(function(e,t){var n=C(this).val();return null==n?null:C.isArray(n)?C.map(n,function(e){return{name:t.name,value:e.replace(Kt,"\r\n")}}):{name:t.name,value:n.replace(Kt,"\r\n")}}).get()}}),C.ajaxSettings.xhr=void 0!==d.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&sn()||function(){try{return new d.ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}()}:sn;var nn=0,rn={},on=C.ajaxSettings.xhr();function sn(){try{return new d.XMLHttpRequest}catch(e){}}d.attachEvent&&d.attachEvent("onunload",function(){for(var e in rn)rn[e](void 0,!0)}),v.cors=!!on&&"withCredentials"in on,(on=v.ajax=!!on)&&C.ajaxTransport(function(l){var u;if(!l.crossDomain||v.cors)return{send:function(e,o){var t,s=l.xhr(),a=++nn;if(s.open(l.type,l.url,l.async,l.username,l.password),l.xhrFields)for(t in l.xhrFields)s[t]=l.xhrFields[t];for(t in l.mimeType&&s.overrideMimeType&&s.overrideMimeType(l.mimeType),l.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)void 0!==e[t]&&s.setRequestHeader(t,e[t]+"");s.send(l.hasContent&&l.data||null),u=function(e,t){var n,i,r;if(u&&(t||4===s.readyState))if(delete rn[a],u=void 0,s.onreadystatechange=C.noop,t)4!==s.readyState&&s.abort();else{r={},n=s.status,"string"==typeof s.responseText&&(r.text=s.responseText);try{i=s.statusText}catch(e){i=""}n||!l.isLocal||l.crossDomain?1223===n&&(n=204):n=r.text?200:404}r&&o(n,i,r,s.getAllResponseHeaders())},l.async?4===s.readyState?setTimeout(u):s.onreadystatechange=rn[a]=u:u()},abort:function(){u&&u(void 0,!0)}}}),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(e){return C.globalEval(e),e}}}),C.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),C.ajaxTransport("script",function(t){if(t.crossDomain){var i,r=_.head||C("head")[0]||_.documentElement;return{send:function(e,n){(i=_.createElement("script")).async=!0,t.scriptCharset&&(i.charset=t.scriptCharset),i.src=t.url,i.onload=i.onreadystatechange=function(e,t){!t&&i.readyState&&!/loaded|complete/.test(i.readyState)||(i.onload=i.onreadystatechange=null,i.parentNode&&i.parentNode.removeChild(i),i=null,t||n(200,"success"))},r.insertBefore(i,r.firstChild)},abort:function(){i&&i.onload(void 0,!0)}}}});var an=[],ln=/(=)\?(?=&|$)|\?\?/;C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=an.pop()||C.expando+"_"+jt++;return this[e]=!0,e}}),C.ajaxPrefilter("json jsonp",function(e,t,n){var i,r,o,s=!1!==e.jsonp&&(ln.test(e.url)?"url":"string"==typeof e.data&&!(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&ln.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=C.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(ln,"$1"+i):!1!==e.jsonp&&(e.url+=(At.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return o||C.error(i+" was not called"),o[0]},e.dataTypes[0]="json",r=d[i],d[i]=function(){o=arguments},n.always(function(){d[i]=r,e[i]&&(e.jsonpCallback=t.jsonpCallback,an.push(i)),o&&C.isFunction(r)&&r(o[0]),o=r=void 0}),"script"}),C.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||_;var i=b.exec(e),r=!n&&[];return i?[t.createElement(i[1])]:(i=C.buildFragment([e],t,r),r&&r.length&&C(r).remove(),C.merge([],i.childNodes))};var un=C.fn.load;C.fn.load=function(e,t,n){if("string"!=typeof e&&un)return un.apply(this,arguments);var i,r,o,s=this,a=e.indexOf(" ");return 0<=a&&(i=C.trim(e.slice(a,e.length)),e=e.slice(0,a)),C.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),0<s.length&&C.ajax({url:e,type:o,dataType:"html",data:t}).done(function(e){r=arguments,s.html(i?C("<div>").append(C.parseHTML(e)).find(i):e)}).complete(n&&function(e,t){s.each(n,r||[e.responseText,t,e])}),this},C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){C.fn[t]=function(e){return this.on(t,e)}}),C.expr.filters.animated=function(t){return C.grep(C.timers,function(e){return t===e.elem}).length};var cn=d.document.documentElement;function fn(e){return C.isWindow(e)?e:9===e.nodeType&&(e.defaultView||e.parentWindow)}C.offset={setOffset:function(e,t,n){var i,r,o,s,a,l,u=C.css(e,"position"),c=C(e),f={};"static"===u&&(e.style.position="relative"),a=c.offset(),o=C.css(e,"top"),l=C.css(e,"left"),r=("absolute"===u||"fixed"===u)&&-1<C.inArray("auto",[o,l])?(s=(i=c.position()).top,i.left):(s=parseFloat(o)||0,parseFloat(l)||0),C.isFunction(t)&&(t=t.call(e,n,a)),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+r),"using"in t?t.using.call(e,f):c.css(f)}},C.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){C.offset.setOffset(this,t,e)});var e,n,i={top:0,left:0},r=this[0],o=r&&r.ownerDocument;return o?(e=o.documentElement,C.contains(e,r)?(typeof r.getBoundingClientRect!==L&&(i=r.getBoundingClientRect()),n=fn(o),{top:i.top+(n.pageYOffset||e.scrollTop)-(e.clientTop||0),left:i.left+(n.pageXOffset||e.scrollLeft)-(e.clientLeft||0)}):i):void 0},position:function(){if(this[0]){var e,t,n={top:0,left:0},i=this[0];return"fixed"===C.css(i,"position")?t=i.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),C.nodeName(e[0],"html")||(n=e.offset()),n.top+=C.css(e[0],"borderTopWidth",!0),n.left+=C.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-C.css(i,"marginTop",!0),left:t.left-n.left-C.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent||cn;e&&!C.nodeName(e,"html")&&"static"===C.css(e,"position");)e=e.offsetParent;return e||cn})}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,r){var o=/Y/.test(r);C.fn[t]=function(e){return U(this,function(e,t,n){var i=fn(e);if(void 0===n)return i?r in i?i[r]:i.document.documentElement[t]:e[t];i?i.scrollTo(o?C(i).scrollLeft():n,o?n:C(i).scrollTop()):e[t]=n},t,e,arguments.length,null)}}),C.each(["top","left"],function(e,n){C.cssHooks[n]=$e(v.pixelPosition,function(e,t){if(t)return t=Ae(e,n),qe.test(t)?C(e).position()[n]+"px":t})}),C.each({Height:"height",Width:"width"},function(o,s){C.each({padding:"inner"+o,content:s,"":"outer"+o},function(i,e){C.fn[e]=function(e,t){var n=arguments.length&&(i||"boolean"!=typeof e),r=i||(!0===e||!0===t?"margin":"border");return U(this,function(e,t,n){var i;return C.isWindow(e)?e.document.documentElement["client"+o]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+o],i["scroll"+o],e.body["offset"+o],i["offset"+o],i["client"+o])):void 0===n?C.css(e,t,r):C.style(e,t,n,r)},s,n?e:void 0,n,null)}})}),C.fn.size=function(){return this.length},C.fn.andSelf=C.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return C});var pn=d.jQuery,hn=d.$;return C.noConflict=function(e){return d.$===C&&(d.$=hn),e&&d.jQuery===C&&(d.jQuery=pn),C},typeof e===L&&(d.jQuery=d.$=C),C}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e(jQuery)}(function(D){var e,t,n,i;function r(e,t){var n,i,r,o=e.nodeName.toLowerCase();return"area"===o?(i=(n=e.parentNode).name,!(!e.href||!i||"map"!==n.nodeName.toLowerCase())&&(!!(r=D("img[usemap='#"+i+"']")[0])&&s(r))):(/^(input|select|textarea|button|object)$/.test(o)?!e.disabled:"a"===o&&e.href||t)&&s(e)}function s(e){return D.expr.filters.visible(e)&&!D(e).parents().addBack().filter(function(){return"hidden"===D.css(this,"visibility")}).length}D.ui=D.ui||{},D.extend(D.ui,{version:"1.11.4",keyCode:{BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38}}),D.fn.extend({scrollParent:function(e){var t=this.css("position"),n="absolute"===t,i=e?/(auto|scroll|hidden)/:/(auto|scroll)/,r=this.parents().filter(function(){var e=D(this);return(!n||"static"!==e.css("position"))&&i.test(e.css("overflow")+e.css("overflow-y")+e.css("overflow-x"))}).eq(0);return"fixed"!==t&&r.length?r:D(this[0].ownerDocument||document)},uniqueId:(e=0,function(){return this.each(function(){this.id||(this.id="ui-id-"+ ++e)})}),removeUniqueId:function(){return this.each(function(){/^ui-id-\d+$/.test(this.id)&&D(this).removeAttr("id")})}}),D.extend(D.expr[":"],{data:D.expr.createPseudo?D.expr.createPseudo(function(t){return function(e){return!!D.data(e,t)}}):function(e,t,n){return!!D.data(e,n[3])},focusable:function(e){return r(e,!isNaN(D.attr(e,"tabindex")))},tabbable:function(e){var t=D.attr(e,"tabindex"),n=isNaN(t);return(n||0<=t)&&r(e,!n)}}),D("<a>").outerWidth(1).jquery||D.each(["Width","Height"],function(e,n){var r="Width"===n?["Left","Right"]:["Top","Bottom"],i=n.toLowerCase(),o={innerWidth:D.fn.innerWidth,innerHeight:D.fn.innerHeight,outerWidth:D.fn.outerWidth,outerHeight:D.fn.outerHeight};function s(e,t,n,i){return D.each(r,function(){t-=parseFloat(D.css(e,"padding"+this))||0,n&&(t-=parseFloat(D.css(e,"border"+this+"Width"))||0),i&&(t-=parseFloat(D.css(e,"margin"+this))||0)}),t}D.fn["inner"+n]=function(e){return void 0===e?o["inner"+n].call(this):this.each(function(){D(this).css(i,s(this,e)+"px")})},D.fn["outer"+n]=function(e,t){return"number"!=typeof e?o["outer"+n].call(this,e):this.each(function(){D(this).css(i,s(this,e,!0,t)+"px")})}}),D.fn.addBack||(D.fn.addBack=function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}),D("<a>").data("a-b","a").removeData("a-b").data("a-b")&&(D.fn.removeData=(t=D.fn.removeData,function(e){return arguments.length?t.call(this,D.camelCase(e)):t.call(this)})),D.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()),D.fn.extend({focus:(i=D.fn.focus,function(t,n){return"number"==typeof t?this.each(function(){var e=this;setTimeout(function(){D(e).focus(),n&&n.call(e)},t)}):i.apply(this,arguments)}),disableSelection:(n="onselectstart"in document.createElement("div")?"selectstart":"mousedown",function(){return this.bind(n+".ui-disableSelection",function(e){e.preventDefault()})}),enableSelection:function(){return this.unbind(".ui-disableSelection")},zIndex:function(e){if(void 0!==e)return this.css("zIndex",e);if(this.length)for(var t,n,i=D(this[0]);i.length&&i[0]!==document;){if(("absolute"===(t=i.css("position"))||"relative"===t||"fixed"===t)&&(n=parseInt(i.css("zIndex"),10),!isNaN(n)&&0!==n))return n;i=i.parent()}return 0}}),D.ui.plugin={add:function(e,t,n){var i,r=D.ui[e].prototype;for(i in n)r.plugins[i]=r.plugins[i]||[],r.plugins[i].push([t,n[i]])},call:function(e,t,n,i){var r,o=e.plugins[t];if(o&&(i||e.element[0].parentNode&&11!==e.element[0].parentNode.nodeType))for(r=0;r<o.length;r++)e.options[o[r][0]]&&o[r][1].apply(e.element,n)}};var o,a=0,l=Array.prototype.slice;D.cleanData=(o=D.cleanData,function(e){var t,n,i;for(i=0;null!=(n=e[i]);i++)try{(t=D._data(n,"events"))&&t.remove&&D(n).triggerHandler("remove")}catch(e){}o(e)}),D.widget=function(e,n,t){var i,r,o,s,a={},l=e.split(".")[0];return e=e.split(".")[1],i=l+"-"+e,t||(t=n,n=D.Widget),D.expr[":"][i.toLowerCase()]=function(e){return!!D.data(e,i)},D[l]=D[l]||{},r=D[l][e],o=D[l][e]=function(e,t){if(!this._createWidget)return new o(e,t);arguments.length&&this._createWidget(e,t)},D.extend(o,r,{version:t.version,_proto:D.extend({},t),_childConstructors:[]}),(s=new n).options=D.widget.extend({},s.options),D.each(t,function(t,i){function r(){return n.prototype[t].apply(this,arguments)}function o(e){return n.prototype[t].apply(this,e)}D.isFunction(i)?a[t]=function(){var e,t=this._super,n=this._superApply;return this._super=r,this._superApply=o,e=i.apply(this,arguments),this._super=t,this._superApply=n,e}:a[t]=i}),o.prototype=D.widget.extend(s,{widgetEventPrefix:r&&s.widgetEventPrefix||e},a,{constructor:o,namespace:l,widgetName:e,widgetFullName:i}),r?(D.each(r._childConstructors,function(e,t){var n=t.prototype;D.widget(n.namespace+"."+n.widgetName,o,t._proto)}),delete r._childConstructors):n._childConstructors.push(o),D.widget.bridge(e,o),o},D.widget.extend=function(e){for(var t,n,i=l.call(arguments,1),r=0,o=i.length;r<o;r++)for(t in i[r])n=i[r][t],i[r].hasOwnProperty(t)&&void 0!==n&&(D.isPlainObject(n)?e[t]=D.isPlainObject(e[t])?D.widget.extend({},e[t],n):D.widget.extend({},n):e[t]=n);return e},D.widget.bridge=function(o,t){var s=t.prototype.widgetFullName||o;D.fn[o]=function(n){var e="string"==typeof n,i=l.call(arguments,1),r=this;return e?this.each(function(){var e,t=D.data(this,s);return"instance"===n?(r=t,!1):t?D.isFunction(t[n])&&"_"!==n.charAt(0)?(e=t[n].apply(t,i))!==t&&void 0!==e?(r=e&&e.jquery?r.pushStack(e.get()):e,!1):void 0:D.error("no such method '"+n+"' for "+o+" widget instance"):D.error("cannot call methods on "+o+" prior to initialization; attempted to call method '"+n+"'")}):(i.length&&(n=D.widget.extend.apply(null,[n].concat(i))),this.each(function(){var e=D.data(this,s);e?(e.option(n||{}),e._init&&e._init()):D.data(this,s,new t(n,this))})),r}},D.Widget=function(){},D.Widget._childConstructors=[],D.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{disabled:!1,create:null},_createWidget:function(e,t){t=D(t||this.defaultElement||this)[0],this.element=D(t),this.uuid=a++,this.eventNamespace="."+this.widgetName+this.uuid,this.bindings=D(),this.hoverable=D(),this.focusable=D(),t!==this&&(D.data(t,this.widgetFullName,this),this._on(!0,this.element,{remove:function(e){e.target===t&&this.destroy()}}),this.document=D(t.style?t.ownerDocument:t.document||t),this.window=D(this.document[0].defaultView||this.document[0].parentWindow)),this.options=D.widget.extend({},this.options,this._getCreateOptions(),e),this._create(),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:D.noop,_getCreateEventData:D.noop,_create:D.noop,_init:D.noop,destroy:function(){this._destroy(),this.element.unbind(this.eventNamespace).removeData(this.widgetFullName).removeData(D.camelCase(this.widgetFullName)),this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName+"-disabled ui-state-disabled"),this.bindings.unbind(this.eventNamespace),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")},_destroy:D.noop,widget:function(){return this.element},option:function(e,t){var n,i,r,o=e;if(0===arguments.length)return D.widget.extend({},this.options);if("string"==typeof e)if(o={},e=(n=e.split(".")).shift(),n.length){for(i=o[e]=D.widget.extend({},this.options[e]),r=0;r<n.length-1;r++)i[n[r]]=i[n[r]]||{},i=i[n[r]];if(e=n.pop(),1===arguments.length)return void 0===i[e]?null:i[e];i[e]=t}else{if(1===arguments.length)return void 0===this.options[e]?null:this.options[e];o[e]=t}return this._setOptions(o),this},_setOptions:function(e){var t;for(t in e)this._setOption(t,e[t]);return this},_setOption:function(e,t){return this.options[e]=t,"disabled"===e&&(this.widget().toggleClass(this.widgetFullName+"-disabled",!!t),t&&(this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus"))),this},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_on:function(s,a,e){var l,u=this;"boolean"!=typeof s&&(e=a,a=s,s=!1),e?(a=l=D(a),this.bindings=this.bindings.add(a)):(e=a,a=this.element,l=this.widget()),D.each(e,function(e,t){function n(){if(s||!0!==u.options.disabled&&!D(this).hasClass("ui-state-disabled"))return("string"==typeof t?u[t]:t).apply(u,arguments)}"string"!=typeof t&&(n.guid=t.guid=t.guid||n.guid||D.guid++);var i=e.match(/^([\w:-]*)\s*(.*)$/),r=i[1]+u.eventNamespace,o=i[2];o?l.delegate(o,r,n):a.bind(r,n)})},_off:function(e,t){t=(t||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,e.unbind(t).undelegate(t),this.bindings=D(this.bindings.not(e).get()),this.focusable=D(this.focusable.not(e).get()),this.hoverable=D(this.hoverable.not(e).get())},_delay:function(e,t){var n=this;return setTimeout(function(){return("string"==typeof e?n[e]:e).apply(n,arguments)},t||0)},_hoverable:function(e){this.hoverable=this.hoverable.add(e),this._on(e,{mouseenter:function(e){D(e.currentTarget).addClass("ui-state-hover")},mouseleave:function(e){D(e.currentTarget).removeClass("ui-state-hover")}})},_focusable:function(e){this.focusable=this.focusable.add(e),this._on(e,{focusin:function(e){D(e.currentTarget).addClass("ui-state-focus")},focusout:function(e){D(e.currentTarget).removeClass("ui-state-focus")}})},_trigger:function(e,t,n){var i,r,o=this.options[e];if(n=n||{},(t=D.Event(t)).type=(e===this.widgetEventPrefix?e:this.widgetEventPrefix+e).toLowerCase(),t.target=this.element[0],r=t.originalEvent)for(i in r)i in t||(t[i]=r[i]);return this.element.trigger(t,n),!(D.isFunction(o)&&!1===o.apply(this.element[0],[t].concat(n))||t.isDefaultPrevented())}},D.each({show:"fadeIn",hide:"fadeOut"},function(o,s){D.Widget.prototype["_"+o]=function(t,e,n){"string"==typeof e&&(e={effect:e});var i,r=e?!0!==e&&"number"!=typeof e&&e.effect||s:o;"number"==typeof(e=e||{})&&(e={duration:e}),i=!D.isEmptyObject(e),e.complete=n,e.delay&&t.delay(e.delay),i&&D.effects&&D.effects.effect[r]?t[o](e):r!==o&&t[r]?t[r](e.duration,e.easing,n):t.queue(function(e){D(this)[o](),n&&n.call(t[0]),e()})}});D.widget;var u=!1;D(document).mouseup(function(){u=!1});D.widget("ui.mouse",{version:"1.11.4",options:{cancel:"input,textarea,button,select,option",distance:1,delay:0},_mouseInit:function(){var t=this;this.element.bind("mousedown."+this.widgetName,function(e){return t._mouseDown(e)}).bind("click."+this.widgetName,function(e){if(!0===D.data(e.target,t.widgetName+".preventClickEvent"))return D.removeData(e.target,t.widgetName+".preventClickEvent"),e.stopImmediatePropagation(),!1}),this.started=!1},_mouseDestroy:function(){this.element.unbind("."+this.widgetName),this._mouseMoveDelegate&&this.document.unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(e){if(!u){this._mouseMoved=!1,this._mouseStarted&&this._mouseUp(e),this._mouseDownEvent=e;var t=this,n=1===e.which,i=!("string"!=typeof this.options.cancel||!e.target.nodeName)&&D(e.target).closest(this.options.cancel).length;return n&&!i&&this._mouseCapture(e)?(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){t.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=!1!==this._mouseStart(e),!this._mouseStarted)?(e.preventDefault(),!0):(!0===D.data(e.target,this.widgetName+".preventClickEvent")&&D.removeData(e.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(e){return t._mouseMove(e)},this._mouseUpDelegate=function(e){return t._mouseUp(e)},this.document.bind("mousemove."+this.widgetName,this._mouseMoveDelegate).bind("mouseup."+this.widgetName,this._mouseUpDelegate),e.preventDefault(),u=!0)):!0}},_mouseMove:function(e){if(this._mouseMoved){if(D.ui.ie&&(!document.documentMode||document.documentMode<9)&&!e.button)return this._mouseUp(e);if(!e.which)return this._mouseUp(e)}return(e.which||e.button)&&(this._mouseMoved=!0),this._mouseStarted?(this._mouseDrag(e),e.preventDefault()):(this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=!1!==this._mouseStart(this._mouseDownEvent,e),this._mouseStarted?this._mouseDrag(e):this._mouseUp(e)),!this._mouseStarted)},_mouseUp:function(e){return this.document.unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,e.target===this._mouseDownEvent.target&&D.data(e.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(e)),u=!1},_mouseDistanceMet:function(e){return Math.max(Math.abs(this._mouseDownEvent.pageX-e.pageX),Math.abs(this._mouseDownEvent.pageY-e.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}});!function(){D.ui=D.ui||{};var r,T,C=Math.max,_=Math.abs,E=Math.round,i=/left|center|right/,o=/top|center|bottom/,s=/[\+\-]\d+(\.[\d]+)?%?/,a=/^\w+/,l=/%$/,u=D.fn.position;function S(e,t,n){return[parseFloat(e[0])*(l.test(e[0])?t/100:1),parseFloat(e[1])*(l.test(e[1])?n/100:1)]}function N(e,t){return parseInt(D.css(e,t),10)||0}D.position={scrollbarWidth:function(){if(void 0!==r)return r;var e,t,n=D("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),i=n.children()[0];return D("body").append(n),e=i.offsetWidth,n.css("overflow","scroll"),e===(t=i.offsetWidth)&&(t=n[0].clientWidth),n.remove(),r=e-t},getScrollInfo:function(e){var t=e.isWindow||e.isDocument?"":e.element.css("overflow-x"),n=e.isWindow||e.isDocument?"":e.element.css("overflow-y"),i="scroll"===t||"auto"===t&&e.width<e.element[0].scrollWidth;return{width:"scroll"===n||"auto"===n&&e.height<e.element[0].scrollHeight?D.position.scrollbarWidth():0,height:i?D.position.scrollbarWidth():0}},getWithinInfo:function(e){var t=D(e||window),n=D.isWindow(t[0]),i=!!t[0]&&9===t[0].nodeType;return{element:t,isWindow:n,isDocument:i,offset:t.offset()||{left:0,top:0},scrollLeft:t.scrollLeft(),scrollTop:t.scrollTop(),width:n||i?t.width():t.outerWidth(),height:n||i?t.height():t.outerHeight()}}},D.fn.position=function(f){if(!f||!f.of)return u.apply(this,arguments);f=D.extend({},f);var p,h,d,g,m,e,t,n,v=D(f.of),y=D.position.getWithinInfo(f.within),b=D.position.getScrollInfo(y),x=(f.collision||"flip").split(" "),w={};return e=9===(n=(t=v)[0]).nodeType?{width:t.width(),height:t.height(),offset:{top:0,left:0}}:D.isWindow(n)?{width:t.width(),height:t.height(),offset:{top:t.scrollTop(),left:t.scrollLeft()}}:n.preventDefault?{width:0,height:0,offset:{top:n.pageY,left:n.pageX}}:{width:t.outerWidth(),height:t.outerHeight(),offset:t.offset()},v[0].preventDefault&&(f.at="left top"),h=e.width,d=e.height,g=e.offset,m=D.extend({},g),D.each(["my","at"],function(){var e,t,n=(f[this]||"").split(" ");1===n.length&&(n=i.test(n[0])?n.concat(["center"]):o.test(n[0])?["center"].concat(n):["center","center"]),n[0]=i.test(n[0])?n[0]:"center",n[1]=o.test(n[1])?n[1]:"center",e=s.exec(n[0]),t=s.exec(n[1]),w[this]=[e?e[0]:0,t?t[0]:0],f[this]=[a.exec(n[0])[0],a.exec(n[1])[0]]}),1===x.length&&(x[1]=x[0]),"right"===f.at[0]?m.left+=h:"center"===f.at[0]&&(m.left+=h/2),"bottom"===f.at[1]?m.top+=d:"center"===f.at[1]&&(m.top+=d/2),p=S(w.at,h,d),m.left+=p[0],m.top+=p[1],this.each(function(){var n,e,s=D(this),a=s.outerWidth(),l=s.outerHeight(),t=N(this,"marginLeft"),i=N(this,"marginTop"),r=a+t+N(this,"marginRight")+b.width,o=l+i+N(this,"marginBottom")+b.height,u=D.extend({},m),c=S(w.my,s.outerWidth(),s.outerHeight());"right"===f.my[0]?u.left-=a:"center"===f.my[0]&&(u.left-=a/2),"bottom"===f.my[1]?u.top-=l:"center"===f.my[1]&&(u.top-=l/2),u.left+=c[0],u.top+=c[1],T||(u.left=E(u.left),u.top=E(u.top)),n={marginLeft:t,marginTop:i},D.each(["left","top"],function(e,t){D.ui.position[x[e]]&&D.ui.position[x[e]][t](u,{targetWidth:h,targetHeight:d,elemWidth:a,elemHeight:l,collisionPosition:n,collisionWidth:r,collisionHeight:o,offset:[p[0]+c[0],p[1]+c[1]],my:f.my,at:f.at,within:y,elem:s})}),f.using&&(e=function(e){var t=g.left-u.left,n=t+h-a,i=g.top-u.top,r=i+d-l,o={target:{element:v,left:g.left,top:g.top,width:h,height:d},element:{element:s,left:u.left,top:u.top,width:a,height:l},horizontal:n<0?"left":0<t?"right":"center",vertical:r<0?"top":0<i?"bottom":"middle"};h<a&&_(t+n)<h&&(o.horizontal="center"),d<l&&_(i+r)<d&&(o.vertical="middle"),C(_(t),_(n))>C(_(i),_(r))?o.important="horizontal":o.important="vertical",f.using.call(this,e,o)}),s.offset(D.extend(u,{using:e}))})},D.ui.position={fit:{left:function(e,t){var n,i=t.within,r=i.isWindow?i.scrollLeft:i.offset.left,o=i.width,s=e.left-t.collisionPosition.marginLeft,a=r-s,l=s+t.collisionWidth-o-r;t.collisionWidth>o?0<a&&l<=0?(n=e.left+a+t.collisionWidth-o-r,e.left+=a-n):e.left=!(0<l&&a<=0)&&l<a?r+o-t.collisionWidth:r:0<a?e.left+=a:0<l?e.left-=l:e.left=C(e.left-s,e.left)},top:function(e,t){var n,i=t.within,r=i.isWindow?i.scrollTop:i.offset.top,o=t.within.height,s=e.top-t.collisionPosition.marginTop,a=r-s,l=s+t.collisionHeight-o-r;t.collisionHeight>o?0<a&&l<=0?(n=e.top+a+t.collisionHeight-o-r,e.top+=a-n):e.top=!(0<l&&a<=0)&&l<a?r+o-t.collisionHeight:r:0<a?e.top+=a:0<l?e.top-=l:e.top=C(e.top-s,e.top)}},flip:{left:function(e,t){var n,i,r=t.within,o=r.offset.left+r.scrollLeft,s=r.width,a=r.isWindow?r.scrollLeft:r.offset.left,l=e.left-t.collisionPosition.marginLeft,u=l-a,c=l+t.collisionWidth-s-a,f="left"===t.my[0]?-t.elemWidth:"right"===t.my[0]?t.elemWidth:0,p="left"===t.at[0]?t.targetWidth:"right"===t.at[0]?-t.targetWidth:0,h=-2*t.offset[0];u<0?((n=e.left+f+p+h+t.collisionWidth-s-o)<0||n<_(u))&&(e.left+=f+p+h):0<c&&(0<(i=e.left-t.collisionPosition.marginLeft+f+p+h-a)||_(i)<c)&&(e.left+=f+p+h)},top:function(e,t){var n,i,r=t.within,o=r.offset.top+r.scrollTop,s=r.height,a=r.isWindow?r.scrollTop:r.offset.top,l=e.top-t.collisionPosition.marginTop,u=l-a,c=l+t.collisionHeight-s-a,f="top"===t.my[1]?-t.elemHeight:"bottom"===t.my[1]?t.elemHeight:0,p="top"===t.at[1]?t.targetHeight:"bottom"===t.at[1]?-t.targetHeight:0,h=-2*t.offset[1];u<0?((i=e.top+f+p+h+t.collisionHeight-s-o)<0||i<_(u))&&(e.top+=f+p+h):0<c&&(0<(n=e.top-t.collisionPosition.marginTop+f+p+h-a)||_(n)<c)&&(e.top+=f+p+h)}},flipfit:{left:function(){D.ui.position.flip.left.apply(this,arguments),D.ui.position.fit.left.apply(this,arguments)},top:function(){D.ui.position.flip.top.apply(this,arguments),D.ui.position.fit.top.apply(this,arguments)}}},function(){var e,t,n,i,r,o=document.getElementsByTagName("body")[0],s=document.createElement("div");for(r in e=document.createElement(o?"div":"body"),n={visibility:"hidden",width:0,height:0,border:0,margin:0,background:"none"},o&&D.extend(n,{position:"absolute",left:"-1000px",top:"-1000px"}),n)e.style[r]=n[r];e.appendChild(s),(t=o||document.documentElement).insertBefore(e,t.firstChild),s.style.cssText="position: absolute; left: 10.7432222px;",i=D(s).offset().left,T=10<i&&i<11,e.innerHTML="",t.removeChild(e)}()}();D.ui.position;D.widget("ui.draggable",D.ui.mouse,{version:"1.11.4",widgetEventPrefix:"drag",options:{addClasses:!0,appendTo:"parent",axis:!1,connectToSortable:!1,containment:!1,cursor:"auto",cursorAt:!1,grid:!1,handle:!1,helper:"original",iframeFix:!1,opacity:!1,refreshPositions:!1,revert:!1,revertDuration:500,scope:"default",scroll:!0,scrollSensitivity:20,scrollSpeed:20,snap:!1,snapMode:"both",snapTolerance:20,stack:!1,zIndex:!1,drag:null,start:null,stop:null},_create:function(){"original"===this.options.helper&&this._setPositionRelative(),this.options.addClasses&&this.element.addClass("ui-draggable"),this.options.disabled&&this.element.addClass("ui-draggable-disabled"),this._setHandleClassName(),this._mouseInit()},_setOption:function(e,t){this._super(e,t),"handle"===e&&(this._removeHandleClassName(),this._setHandleClassName())},_destroy:function(){(this.helper||this.element).is(".ui-draggable-dragging")?this.destroyOnClear=!0:(this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled"),this._removeHandleClassName(),this._mouseDestroy())},_mouseCapture:function(e){var t=this.options;return this._blurActiveElement(e),!(this.helper||t.disabled||0<D(e.target).closest(".ui-resizable-handle").length)&&(this.handle=this._getHandle(e),!!this.handle&&(this._blockFrames(!0===t.iframeFix?"iframe":t.iframeFix),!0))},_blockFrames:function(e){this.iframeBlocks=this.document.find(e).map(function(){var e=D(this);return D("<div>").css("position","absolute").appendTo(e.parent()).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).offset(e.offset())[0]})},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_blurActiveElement:function(e){var t=this.document[0];if(this.handleElement.is(e.target))try{t.activeElement&&"body"!==t.activeElement.nodeName.toLowerCase()&&D(t.activeElement).blur()}catch(e){}},_mouseStart:function(e){var t=this.options;return this.helper=this._createHelper(e),this.helper.addClass("ui-draggable-dragging"),this._cacheHelperProportions(),D.ui.ddmanager&&(D.ui.ddmanager.current=this),this._cacheMargins(),this.cssPosition=this.helper.css("position"),this.scrollParent=this.helper.scrollParent(!0),this.offsetParent=this.helper.offsetParent(),this.hasFixedAncestor=0<this.helper.parents().filter(function(){return"fixed"===D(this).css("position")}).length,this.positionAbs=this.element.offset(),this._refreshOffsets(e),this.originalPosition=this.position=this._generatePosition(e,!1),this.originalPageX=e.pageX,this.originalPageY=e.pageY,t.cursorAt&&this._adjustOffsetFromHelper(t.cursorAt),this._setContainment(),!1===this._trigger("start",e)?(this._clear(),!1):(this._cacheHelperProportions(),D.ui.ddmanager&&!t.dropBehaviour&&D.ui.ddmanager.prepareOffsets(this,e),this._normalizeRightBottom(),this._mouseDrag(e,!0),D.ui.ddmanager&&D.ui.ddmanager.dragStart(this,e),!0)},_refreshOffsets:function(e){this.offset={top:this.positionAbs.top-this.margins.top,left:this.positionAbs.left-this.margins.left,scroll:!1,parent:this._getParentOffset(),relative:this._getRelativeOffset()},this.offset.click={left:e.pageX-this.offset.left,top:e.pageY-this.offset.top}},_mouseDrag:function(e,t){if(this.hasFixedAncestor&&(this.offset.parent=this._getParentOffset()),this.position=this._generatePosition(e,!0),this.positionAbs=this._convertPositionTo("absolute"),!t){var n=this._uiHash();if(!1===this._trigger("drag",e,n))return this._mouseUp({}),!1;this.position=n.position}return this.helper[0].style.left=this.position.left+"px",this.helper[0].style.top=this.position.top+"px",D.ui.ddmanager&&D.ui.ddmanager.drag(this,e),!1},_mouseStop:function(e){var t=this,n=!1;return D.ui.ddmanager&&!this.options.dropBehaviour&&(n=D.ui.ddmanager.drop(this,e)),this.dropped&&(n=this.dropped,this.dropped=!1),"invalid"===this.options.revert&&!n||"valid"===this.options.revert&&n||!0===this.options.revert||D.isFunction(this.options.revert)&&this.options.revert.call(this.element,n)?D(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){!1!==t._trigger("stop",e)&&t._clear()}):!1!==this._trigger("stop",e)&&this._clear(),!1},_mouseUp:function(e){return this._unblockFrames(),D.ui.ddmanager&&D.ui.ddmanager.dragStop(this,e),this.handleElement.is(e.target)&&this.element.focus(),D.ui.mouse.prototype._mouseUp.call(this,e)},cancel:function(){return this.helper.is(".ui-draggable-dragging")?this._mouseUp({}):this._clear(),this},_getHandle:function(e){return!this.options.handle||!!D(e.target).closest(this.element.find(this.options.handle)).length},_setHandleClassName:function(){this.handleElement=this.options.handle?this.element.find(this.options.handle):this.element,this.handleElement.addClass("ui-draggable-handle")},_removeHandleClassName:function(){this.handleElement.removeClass("ui-draggable-handle")},_createHelper:function(e){var t=this.options,n=D.isFunction(t.helper),i=n?D(t.helper.apply(this.element[0],[e])):"clone"===t.helper?this.element.clone().removeAttr("id"):this.element;return i.parents("body").length||i.appendTo("parent"===t.appendTo?this.element[0].parentNode:t.appendTo),n&&i[0]===this.element[0]&&this._setPositionRelative(),i[0]===this.element[0]||/(fixed|absolute)/.test(i.css("position"))||i.css("position","absolute"),i},_setPositionRelative:function(){/^(?:r|a|f)/.test(this.element.css("position"))||(this.element[0].style.position="relative")},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),D.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_isRootNode:function(e){return/(html|body)/i.test(e.tagName)||e===this.document[0]},_getParentOffset:function(){var e=this.offsetParent.offset(),t=this.document[0];return"absolute"===this.cssPosition&&this.scrollParent[0]!==t&&D.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),this._isRootNode(this.offsetParent[0])&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"!==this.cssPosition)return{top:0,left:0};var e=this.element.position(),t=this._isRootNode(this.scrollParent[0]);return{top:e.top-(parseInt(this.helper.css("top"),10)||0)+(t?0:this.scrollParent.scrollTop()),left:e.left-(parseInt(this.helper.css("left"),10)||0)+(t?0:this.scrollParent.scrollLeft())}},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,t,n,i=this.options,r=this.document[0];this.relativeContainer=null,i.containment?"window"!==i.containment?"document"!==i.containment?i.containment.constructor!==Array?("parent"===i.containment&&(i.containment=this.helper[0].parentNode),(n=(t=D(i.containment))[0])&&(e=/(scroll|auto)/.test(t.css("overflow")),this.containment=[(parseInt(t.css("borderLeftWidth"),10)||0)+(parseInt(t.css("paddingLeft"),10)||0),(parseInt(t.css("borderTopWidth"),10)||0)+(parseInt(t.css("paddingTop"),10)||0),(e?Math.max(n.scrollWidth,n.offsetWidth):n.offsetWidth)-(parseInt(t.css("borderRightWidth"),10)||0)-(parseInt(t.css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(e?Math.max(n.scrollHeight,n.offsetHeight):n.offsetHeight)-(parseInt(t.css("borderBottomWidth"),10)||0)-(parseInt(t.css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom],this.relativeContainer=t)):this.containment=i.containment:this.containment=[0,0,D(r).width()-this.helperProportions.width-this.margins.left,(D(r).height()||r.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]:this.containment=[D(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,D(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,D(window).scrollLeft()+D(window).width()-this.helperProportions.width-this.margins.left,D(window).scrollTop()+(D(window).height()||r.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]:this.containment=null},_convertPositionTo:function(e,t){t=t||this.position;var n="absolute"===e?1:-1,i=this._isRootNode(this.scrollParent[0]);return{top:t.top+this.offset.relative.top*n+this.offset.parent.top*n-("fixed"===this.cssPosition?-this.offset.scroll.top:i?0:this.offset.scroll.top)*n,left:t.left+this.offset.relative.left*n+this.offset.parent.left*n-("fixed"===this.cssPosition?-this.offset.scroll.left:i?0:this.offset.scroll.left)*n}},_generatePosition:function(e,t){var n,i,r,o,s=this.options,a=this._isRootNode(this.scrollParent[0]),l=e.pageX,u=e.pageY;return a&&this.offset.scroll||(this.offset.scroll={top:this.scrollParent.scrollTop(),left:this.scrollParent.scrollLeft()}),t&&(this.containment&&(n=this.relativeContainer?(i=this.relativeContainer.offset(),[this.containment[0]+i.left,this.containment[1]+i.top,this.containment[2]+i.left,this.containment[3]+i.top]):this.containment,e.pageX-this.offset.click.left<n[0]&&(l=n[0]+this.offset.click.left),e.pageY-this.offset.click.top<n[1]&&(u=n[1]+this.offset.click.top),e.pageX-this.offset.click.left>n[2]&&(l=n[2]+this.offset.click.left),e.pageY-this.offset.click.top>n[3]&&(u=n[3]+this.offset.click.top)),s.grid&&(r=s.grid[1]?this.originalPageY+Math.round((u-this.originalPageY)/s.grid[1])*s.grid[1]:this.originalPageY,u=!n||r-this.offset.click.top>=n[1]||r-this.offset.click.top>n[3]?r:r-this.offset.click.top>=n[1]?r-s.grid[1]:r+s.grid[1],o=s.grid[0]?this.originalPageX+Math.round((l-this.originalPageX)/s.grid[0])*s.grid[0]:this.originalPageX,l=!n||o-this.offset.click.left>=n[0]||o-this.offset.click.left>n[2]?o:o-this.offset.click.left>=n[0]?o-s.grid[0]:o+s.grid[0]),"y"===s.axis&&(l=this.originalPageX),"x"===s.axis&&(u=this.originalPageY)),{top:u-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.offset.scroll.top:a?0:this.offset.scroll.top),left:l-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.offset.scroll.left:a?0:this.offset.scroll.left)}},_clear:function(){this.helper.removeClass("ui-draggable-dragging"),this.helper[0]===this.element[0]||this.cancelHelperRemoval||this.helper.remove(),this.helper=null,this.cancelHelperRemoval=!1,this.destroyOnClear&&this.destroy()},_normalizeRightBottom:function(){"y"!==this.options.axis&&"auto"!==this.helper.css("right")&&(this.helper.width(this.helper.width()),this.helper.css("right","auto")),"x"!==this.options.axis&&"auto"!==this.helper.css("bottom")&&(this.helper.height(this.helper.height()),this.helper.css("bottom","auto"))},_trigger:function(e,t,n){return n=n||this._uiHash(),D.ui.plugin.call(this,e,[t,n,this],!0),/^(drag|start|stop)/.test(e)&&(this.positionAbs=this._convertPositionTo("absolute"),n.offset=this.positionAbs),D.Widget.prototype._trigger.call(this,e,t,n)},plugins:{},_uiHash:function(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}}),D.ui.plugin.add("draggable","connectToSortable",{start:function(t,e,n){var i=D.extend({},e,{item:n.element});n.sortables=[],D(n.options.connectToSortable).each(function(){var e=D(this).sortable("instance");e&&!e.options.disabled&&(n.sortables.push(e),e.refreshPositions(),e._trigger("activate",t,i))})},stop:function(t,e,n){var i=D.extend({},e,{item:n.element});n.cancelHelperRemoval=!1,D.each(n.sortables,function(){var e=this;e.isOver?(e.isOver=0,n.cancelHelperRemoval=!0,e.cancelHelperRemoval=!1,e._storedCSS={position:e.placeholder.css("position"),top:e.placeholder.css("top"),left:e.placeholder.css("left")},e._mouseStop(t),e.options.helper=e.options._helper):(e.cancelHelperRemoval=!0,e._trigger("deactivate",t,i))})},drag:function(n,i,r){D.each(r.sortables,function(){var e=!1,t=this;t.positionAbs=r.positionAbs,t.helperProportions=r.helperProportions,t.offset.click=r.offset.click,t._intersectsWith(t.containerCache)&&(e=!0,D.each(r.sortables,function(){return this.positionAbs=r.positionAbs,this.helperProportions=r.helperProportions,this.offset.click=r.offset.click,this!==t&&this._intersectsWith(this.containerCache)&&D.contains(t.element[0],this.element[0])&&(e=!1),e})),e?(t.isOver||(t.isOver=1,r._parent=i.helper.parent(),t.currentItem=i.helper.appendTo(t.element).data("ui-sortable-item",!0),t.options._helper=t.options.helper,t.options.helper=function(){return i.helper[0]},n.target=t.currentItem[0],t._mouseCapture(n,!0),t._mouseStart(n,!0,!0),t.offset.click.top=r.offset.click.top,t.offset.click.left=r.offset.click.left,t.offset.parent.left-=r.offset.parent.left-t.offset.parent.left,t.offset.parent.top-=r.offset.parent.top-t.offset.parent.top,r._trigger("toSortable",n),r.dropped=t.element,D.each(r.sortables,function(){this.refreshPositions()}),r.currentItem=r.element,t.fromOutside=r),t.currentItem&&(t._mouseDrag(n),i.position=t.position)):t.isOver&&(t.isOver=0,t.cancelHelperRemoval=!0,t.options._revert=t.options.revert,t.options.revert=!1,t._trigger("out",n,t._uiHash(t)),t._mouseStop(n,!0),t.options.revert=t.options._revert,t.options.helper=t.options._helper,t.placeholder&&t.placeholder.remove(),i.helper.appendTo(r._parent),r._refreshOffsets(n),i.position=r._generatePosition(n,!0),r._trigger("fromSortable",n),r.dropped=!1,D.each(r.sortables,function(){this.refreshPositions()}))})}}),D.ui.plugin.add("draggable","cursor",{start:function(e,t,n){var i=D("body"),r=n.options;i.css("cursor")&&(r._cursor=i.css("cursor")),i.css("cursor",r.cursor)},stop:function(e,t,n){var i=n.options;i._cursor&&D("body").css("cursor",i._cursor)}}),D.ui.plugin.add("draggable","opacity",{start:function(e,t,n){var i=D(t.helper),r=n.options;i.css("opacity")&&(r._opacity=i.css("opacity")),i.css("opacity",r.opacity)},stop:function(e,t,n){var i=n.options;i._opacity&&D(t.helper).css("opacity",i._opacity)}}),D.ui.plugin.add("draggable","scroll",{start:function(e,t,n){n.scrollParentNotHidden||(n.scrollParentNotHidden=n.helper.scrollParent(!1)),n.scrollParentNotHidden[0]!==n.document[0]&&"HTML"!==n.scrollParentNotHidden[0].tagName&&(n.overflowOffset=n.scrollParentNotHidden.offset())},drag:function(e,t,n){var i=n.options,r=!1,o=n.scrollParentNotHidden[0],s=n.document[0];o!==s&&"HTML"!==o.tagName?(i.axis&&"x"===i.axis||(n.overflowOffset.top+o.offsetHeight-e.pageY<i.scrollSensitivity?o.scrollTop=r=o.scrollTop+i.scrollSpeed:e.pageY-n.overflowOffset.top<i.scrollSensitivity&&(o.scrollTop=r=o.scrollTop-i.scrollSpeed)),i.axis&&"y"===i.axis||(n.overflowOffset.left+o.offsetWidth-e.pageX<i.scrollSensitivity?o.scrollLeft=r=o.scrollLeft+i.scrollSpeed:e.pageX-n.overflowOffset.left<i.scrollSensitivity&&(o.scrollLeft=r=o.scrollLeft-i.scrollSpeed))):(i.axis&&"x"===i.axis||(e.pageY-D(s).scrollTop()<i.scrollSensitivity?r=D(s).scrollTop(D(s).scrollTop()-i.scrollSpeed):D(window).height()-(e.pageY-D(s).scrollTop())<i.scrollSensitivity&&(r=D(s).scrollTop(D(s).scrollTop()+i.scrollSpeed))),i.axis&&"y"===i.axis||(e.pageX-D(s).scrollLeft()<i.scrollSensitivity?r=D(s).scrollLeft(D(s).scrollLeft()-i.scrollSpeed):D(window).width()-(e.pageX-D(s).scrollLeft())<i.scrollSensitivity&&(r=D(s).scrollLeft(D(s).scrollLeft()+i.scrollSpeed)))),!1!==r&&D.ui.ddmanager&&!i.dropBehaviour&&D.ui.ddmanager.prepareOffsets(n,e)}}),D.ui.plugin.add("draggable","snap",{start:function(e,t,n){var i=n.options;n.snapElements=[],D(i.snap.constructor!==String?i.snap.items||":data(ui-draggable)":i.snap).each(function(){var e=D(this),t=e.offset();this!==n.element[0]&&n.snapElements.push({item:this,width:e.outerWidth(),height:e.outerHeight(),top:t.top,left:t.left})})},drag:function(e,t,n){var i,r,o,s,a,l,u,c,f,p,h=n.options,d=h.snapTolerance,g=t.offset.left,m=g+n.helperProportions.width,v=t.offset.top,y=v+n.helperProportions.height;for(f=n.snapElements.length-1;0<=f;f--)l=(a=n.snapElements[f].left-n.margins.left)+n.snapElements[f].width,c=(u=n.snapElements[f].top-n.margins.top)+n.snapElements[f].height,m<a-d||l+d<g||y<u-d||c+d<v||!D.contains(n.snapElements[f].item.ownerDocument,n.snapElements[f].item)?(n.snapElements[f].snapping&&n.options.snap.release&&n.options.snap.release.call(n.element,e,D.extend(n._uiHash(),{snapItem:n.snapElements[f].item})),n.snapElements[f].snapping=!1):("inner"!==h.snapMode&&(i=Math.abs(u-y)<=d,r=Math.abs(c-v)<=d,o=Math.abs(a-m)<=d,s=Math.abs(l-g)<=d,i&&(t.position.top=n._convertPositionTo("relative",{top:u-n.helperProportions.height,left:0}).top),r&&(t.position.top=n._convertPositionTo("relative",{top:c,left:0}).top),o&&(t.position.left=n._convertPositionTo("relative",{top:0,left:a-n.helperProportions.width}).left),s&&(t.position.left=n._convertPositionTo("relative",{top:0,left:l}).left)),p=i||r||o||s,"outer"!==h.snapMode&&(i=Math.abs(u-v)<=d,r=Math.abs(c-y)<=d,o=Math.abs(a-g)<=d,s=Math.abs(l-m)<=d,i&&(t.position.top=n._convertPositionTo("relative",{top:u,left:0}).top),r&&(t.position.top=n._convertPositionTo("relative",{top:c-n.helperProportions.height,left:0}).top),o&&(t.position.left=n._convertPositionTo("relative",{top:0,left:a}).left),s&&(t.position.left=n._convertPositionTo("relative",{top:0,left:l-n.helperProportions.width}).left)),!n.snapElements[f].snapping&&(i||r||o||s||p)&&n.options.snap.snap&&n.options.snap.snap.call(n.element,e,D.extend(n._uiHash(),{snapItem:n.snapElements[f].item})),n.snapElements[f].snapping=i||r||o||s||p)}}),D.ui.plugin.add("draggable","stack",{start:function(e,t,n){var i,r=n.options,o=D.makeArray(D(r.stack)).sort(function(e,t){return(parseInt(D(e).css("zIndex"),10)||0)-(parseInt(D(t).css("zIndex"),10)||0)});o.length&&(i=parseInt(D(o[0]).css("zIndex"),10)||0,D(o).each(function(e){D(this).css("zIndex",i+e)}),this.css("zIndex",i+o.length))}}),D.ui.plugin.add("draggable","zIndex",{start:function(e,t,n){var i=D(t.helper),r=n.options;i.css("zIndex")&&(r._zIndex=i.css("zIndex")),i.css("zIndex",r.zIndex)},stop:function(e,t,n){var i=n.options;i._zIndex&&D(t.helper).css("zIndex",i._zIndex)}});D.ui.draggable;var c,f,p,h,d,g,m,v,y,b,x,w,T,C,_,E,S,N,k,j,A="ui-effects-",P=D;function H(e,t,n){var i=v[t.type]||{};return null==e?n||!t.def?null:t.def:(e=i.floor?~~e:parseFloat(e),isNaN(e)?t.def:i.mod?(e+i.mod)%i.mod:e<0?0:i.max<e?i.max:e)}function M(s){var a=g(),l=a._rgba=[];return s=s.toLowerCase(),x(d,function(e,t){var n,i=t.re.exec(s),r=i&&t.parse(i),o=t.space||"rgba";if(r)return n=a[o](r),a[m[o].cache]=n[m[o].cache],l=a._rgba=n._rgba,!1}),l.length?("0,0,0,0"===l.join()&&c.extend(l,p.transparent),a):p[s]}function L(e,t,n){return 6*(n=(n+1)%1)<1?e+(t-e)*n*6:2*n<1?t:3*n<2?e+(t-e)*(2/3-n)*6:e}function O(e){var t,n,i=e.ownerDocument.defaultView?e.ownerDocument.defaultView.getComputedStyle(e,null):e.currentStyle,r={};if(i&&i.length&&i[0]&&i[i[0]])for(n=i.length;n--;)"string"==typeof i[t=i[n]]&&(r[D.camelCase(t)]=i[t]);else for(t in i)"string"==typeof i[t]&&(r[t]=i[t]);return r}function I(e,t,n,i){return D.isPlainObject(e)&&(e=(t=e).effect),e={effect:e},null==t&&(t={}),D.isFunction(t)&&(i=t,n=null,t={}),"number"!=typeof t&&!D.fx.speeds[t]||(i=n,n=t,t={}),D.isFunction(n)&&(i=n,n=null),t&&D.extend(e,t),n=n||t.duration,e.duration=D.fx.off?0:"number"==typeof n?n:n in D.fx.speeds?D.fx.speeds[n]:D.fx.speeds._default,e.complete=i||t.complete,e}function F(e){return!e||"number"==typeof e||D.fx.speeds[e]||("string"==typeof e&&!D.effects.effect[e]||(D.isFunction(e)||"object"==typeof e&&!e.effect))}D.effects={effect:{}},h=/^([\-+])=\s*(\d+\.?\d*)/,d=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(e){return[e[1],e[2],e[3],e[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(e){return[2.55*e[1],2.55*e[2],2.55*e[3],e[4]]}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function(e){return[parseInt(e[1],16),parseInt(e[2],16),parseInt(e[3],16)]}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function(e){return[parseInt(e[1]+e[1],16),parseInt(e[2]+e[2],16),parseInt(e[3]+e[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(e){return[e[1],e[2]/100,e[3]/100,e[4]]}}],g=(c=P).Color=function(e,t,n,i){return new c.Color.fn.parse(e,t,n,i)},m={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},v={byte:{floor:!0,max:255},percent:{max:1},degrees:{mod:360,floor:!0}},y=g.support={},b=c("<p>")[0],x=c.each,b.style.cssText="background-color:rgba(1,1,1,.5)",y.rgba=-1<b.style.backgroundColor.indexOf("rgba"),x(m,function(e,t){t.cache="_"+e,t.props.alpha={idx:3,type:"percent",def:1}}),g.fn=c.extend(g.prototype,{parse:function(r,e,t,n){if(r===f)return this._rgba=[null,null,null,null],this;(r.jquery||r.nodeType)&&(r=c(r).css(e),e=f);var o=this,i=c.type(r),s=this._rgba=[];return e!==f&&(r=[r,e,t,n],i="array"),"string"===i?this.parse(M(r)||p._default):"array"===i?(x(m.rgba.props,function(e,t){s[t.idx]=H(r[t.idx],t)}),this):"object"===i?(x(m,r instanceof g?function(e,t){r[t.cache]&&(o[t.cache]=r[t.cache].slice())}:function(e,n){var i=n.cache;x(n.props,function(e,t){if(!o[i]&&n.to){if("alpha"===e||null==r[e])return;o[i]=n.to(o._rgba)}o[i][t.idx]=H(r[e],t,!0)}),o[i]&&c.inArray(null,o[i].slice(0,3))<0&&(o[i][3]=1,n.from&&(o._rgba=n.from(o[i])))}),this):void 0},is:function(e){var r=g(e),o=!0,s=this;return x(m,function(e,t){var n,i=r[t.cache];return i&&(n=s[t.cache]||t.to&&t.to(s._rgba)||[],x(t.props,function(e,t){if(null!=i[t.idx])return o=i[t.idx]===n[t.idx]})),o}),o},_space:function(){var n=[],i=this;return x(m,function(e,t){i[t.cache]&&n.push(e)}),n.pop()},transition:function(e,s){var a=g(e),t=a._space(),n=m[t],i=0===this.alpha()?g("transparent"):this,l=i[n.cache]||n.to(i._rgba),u=l.slice();return a=a[n.cache],x(n.props,function(e,t){var n=t.idx,i=l[n],r=a[n],o=v[t.type]||{};null!==r&&(null===i?u[n]=r:(o.mod&&(o.mod/2<r-i?i+=o.mod:o.mod/2<i-r&&(i-=o.mod)),u[n]=H((r-i)*s+i,t)))}),this[t](u)},blend:function(e){if(1===this._rgba[3])return this;var t=this._rgba.slice(),n=t.pop(),i=g(e)._rgba;return g(c.map(t,function(e,t){return(1-n)*i[t]+n*e}))},toRgbaString:function(){var e="rgba(",t=c.map(this._rgba,function(e,t){return null==e?2<t?1:0:e});return 1===t[3]&&(t.pop(),e="rgb("),e+t.join()+")"},toHslaString:function(){var e="hsla(",t=c.map(this.hsla(),function(e,t){return null==e&&(e=2<t?1:0),t&&t<3&&(e=Math.round(100*e)+"%"),e});return 1===t[3]&&(t.pop(),e="hsl("),e+t.join()+")"},toHexString:function(e){var t=this._rgba.slice(),n=t.pop();return e&&t.push(~~(255*n)),"#"+c.map(t,function(e){return 1===(e=(e||0).toString(16)).length?"0"+e:e}).join("")},toString:function(){return 0===this._rgba[3]?"transparent":this.toRgbaString()}}),g.fn.parse.prototype=g.fn,m.hsla.to=function(e){if(null==e[0]||null==e[1]||null==e[2])return[null,null,null,e[3]];var t,n,i=e[0]/255,r=e[1]/255,o=e[2]/255,s=e[3],a=Math.max(i,r,o),l=Math.min(i,r,o),u=a-l,c=a+l,f=.5*c;return t=l===a?0:i===a?60*(r-o)/u+360:r===a?60*(o-i)/u+120:60*(i-r)/u+240,n=0==u?0:f<=.5?u/c:u/(2-c),[Math.round(t)%360,n,f,null==s?1:s]},m.hsla.from=function(e){if(null==e[0]||null==e[1]||null==e[2])return[null,null,null,e[3]];var t=e[0]/360,n=e[1],i=e[2],r=e[3],o=i<=.5?i*(1+n):i+n-i*n,s=2*i-o;return[Math.round(255*L(s,o,t+1/3)),Math.round(255*L(s,o,t)),Math.round(255*L(s,o,t-1/3)),r]},x(m,function(l,e){var n=e.props,s=e.cache,a=e.to,u=e.from;g.fn[l]=function(e){if(a&&!this[s]&&(this[s]=a(this._rgba)),e===f)return this[s].slice();var t,i=c.type(e),r="array"===i||"object"===i?e:arguments,o=this[s].slice();return x(n,function(e,t){var n=r["object"===i?e:t.idx];null==n&&(n=o[t.idx]),o[t.idx]=H(n,t)}),u?((t=g(u(o)))[s]=o,t):g(o)},x(n,function(s,a){g.fn[s]||(g.fn[s]=function(e){var t,n=c.type(e),i="alpha"===s?this._hsla?"hsla":"rgba":l,r=this[i](),o=r[a.idx];return"undefined"===n?o:("function"===n&&(e=e.call(this,o),n=c.type(e)),null==e&&a.empty?this:("string"===n&&(t=h.exec(e))&&(e=o+parseFloat(t[2])*("+"===t[1]?1:-1)),r[a.idx]=e,this[i](r)))})})}),g.hook=function(e){var t=e.split(" ");x(t,function(e,o){c.cssHooks[o]={set:function(e,t){var n,i,r="";if("transparent"!==t&&("string"!==c.type(t)||(n=M(t)))){if(t=g(n||t),!y.rgba&&1!==t._rgba[3]){for(i="backgroundColor"===o?e.parentNode:e;(""===r||"transparent"===r)&&i&&i.style;)try{r=c.css(i,"backgroundColor"),i=i.parentNode}catch(e){}t=t.blend(r&&"transparent"!==r?r:"_default")}t=t.toRgbaString()}try{e.style[o]=t}catch(e){}}},c.fx.step[o]=function(e){e.colorInit||(e.start=g(e.elem,o),e.end=g(e.end),e.colorInit=!0),c.cssHooks[o].set(e.elem,e.start.transition(e.end,e.pos))}})},g.hook("backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor"),c.cssHooks.borderColor={expand:function(n){var i={};return x(["Top","Right","Bottom","Left"],function(e,t){i["border"+t+"Color"]=n}),i}},p=c.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"},_=["add","remove","toggle"],E={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1},D.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],function(e,t){D.fx.step[t]=function(e){("none"!==e.end&&!e.setAttr||1===e.pos&&!e.setAttr)&&(P.style(e.elem,t,e.end),e.setAttr=!0)}}),D.fn.addBack||(D.fn.addBack=function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}),D.effects.animateClass=function(r,e,t,n){var o=D.speed(e,t,n);return this.queue(function(){var e,n=D(this),t=n.attr("class")||"",i=o.children?n.find("*").addBack():n;i=i.map(function(){return{el:D(this),start:O(this)}}),(e=function(){D.each(_,function(e,t){r[t]&&n[t+"Class"](r[t])})})(),i=i.map(function(){return this.end=O(this.el[0]),this.diff=function(e,t){var n,i,r={};for(n in t)i=t[n],e[n]!==i&&(E[n]||!D.fx.step[n]&&isNaN(parseFloat(i))||(r[n]=i));return r}(this.start,this.end),this}),n.attr("class",t),i=i.map(function(){var e=this,t=D.Deferred(),n=D.extend({},o,{queue:!1,complete:function(){t.resolve(e)}});return this.el.animate(this.diff,n),t.promise()}),D.when.apply(D,i.get()).done(function(){e(),D.each(arguments,function(){var t=this.el;D.each(this.diff,function(e){t.css(e,"")})}),o.complete.call(n[0])})})},D.fn.extend({addClass:(C=D.fn.addClass,function(e,t,n,i){return t?D.effects.animateClass.call(this,{add:e},t,n,i):C.apply(this,arguments)}),removeClass:(T=D.fn.removeClass,function(e,t,n,i){return 1<arguments.length?D.effects.animateClass.call(this,{remove:e},t,n,i):T.apply(this,arguments)}),toggleClass:(w=D.fn.toggleClass,function(e,t,n,i,r){return"boolean"==typeof t||void 0===t?n?D.effects.animateClass.call(this,t?{add:e}:{remove:e},n,i,r):w.apply(this,arguments):D.effects.animateClass.call(this,{toggle:e},t,n,i)}),switchClass:function(e,t,n,i,r){return D.effects.animateClass.call(this,{add:t,remove:e},n,i,r)}}),D.extend(D.effects,{version:"1.11.4",save:function(e,t){for(var n=0;n<t.length;n++)null!==t[n]&&e.data(A+t[n],e[0].style[t[n]])},restore:function(e,t){var n,i;for(i=0;i<t.length;i++)null!==t[i]&&(void 0===(n=e.data(A+t[i]))&&(n=""),e.css(t[i],n))},setMode:function(e,t){return"toggle"===t&&(t=e.is(":hidden")?"show":"hide"),t},getBaseline:function(e,t){var n,i;switch(e[0]){case"top":n=0;break;case"middle":n=.5;break;case"bottom":n=1;break;default:n=e[0]/t.height}switch(e[1]){case"left":i=0;break;case"center":i=.5;break;case"right":i=1;break;default:i=e[1]/t.width}return{x:i,y:n}},createWrapper:function(n){if(n.parent().is(".ui-effects-wrapper"))return n.parent();var i={width:n.outerWidth(!0),height:n.outerHeight(!0),float:n.css("float")},e=D("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),t={width:n.width(),height:n.height()},r=document.activeElement;try{r.id}catch(e){r=document.body}return n.wrap(e),n[0]!==r&&!D.contains(n[0],r)||D(r).focus(),e=n.parent(),"static"===n.css("position")?(e.css({position:"relative"}),n.css({position:"relative"})):(D.extend(i,{position:n.css("position"),zIndex:n.css("z-index")}),D.each(["top","left","bottom","right"],function(e,t){i[t]=n.css(t),isNaN(parseInt(i[t],10))&&(i[t]="auto")}),n.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})),n.css(t),e.css(i).show()},removeWrapper:function(e){var t=document.activeElement;return e.parent().is(".ui-effects-wrapper")&&(e.parent().replaceWith(e),e[0]!==t&&!D.contains(e[0],t)||D(t).focus()),e},setTransition:function(i,e,r,o){return o=o||{},D.each(e,function(e,t){var n=i.cssUnit(t);0<n[0]&&(o[t]=n[0]*r+n[1])}),o}}),D.fn.extend({effect:function(){var o=I.apply(this,arguments),e=o.mode,t=o.queue,s=D.effects.effect[o.effect];if(D.fx.off||!s)return e?this[e](o.duration,o.complete):this.each(function(){o.complete&&o.complete.call(this)});function n(e){var t=D(this),n=o.complete,i=o.mode;function r(){D.isFunction(n)&&n.call(t[0]),D.isFunction(e)&&e()}(t.is(":hidden")?"hide"===i:"show"===i)?(t[i](),r()):s.call(t[0],o,r)}return!1===t?this.each(n):this.queue(t||"fx",n)},show:(k=D.fn.show,function(e){if(F(e))return k.apply(this,arguments);var t=I.apply(this,arguments);return t.mode="show",this.effect.call(this,t)}),hide:(N=D.fn.hide,function(e){if(F(e))return N.apply(this,arguments);var t=I.apply(this,arguments);return t.mode="hide",this.effect.call(this,t)}),toggle:(S=D.fn.toggle,function(e){if(F(e)||"boolean"==typeof e)return S.apply(this,arguments);var t=I.apply(this,arguments);return t.mode="toggle",this.effect.call(this,t)}),cssUnit:function(e){var n=this.css(e),i=[];return D.each(["em","px","%","pt"],function(e,t){0<n.indexOf(t)&&(i=[parseFloat(n),t])}),i}}),j={},D.each(["Quad","Cubic","Quart","Quint","Expo"],function(t,e){j[e]=function(e){return Math.pow(e,t+2)}}),D.extend(j,{Sine:function(e){return 1-Math.cos(e*Math.PI/2)},Circ:function(e){return 1-Math.sqrt(1-e*e)},Elastic:function(e){return 0===e||1===e?e:-Math.pow(2,8*(e-1))*Math.sin((80*(e-1)-7.5)*Math.PI/15)},Back:function(e){return e*e*(3*e-2)},Bounce:function(e){for(var t,n=4;e<((t=Math.pow(2,--n))-1)/11;);return 1/Math.pow(4,3-n)-7.5625*Math.pow((3*t-2)/22-e,2)}}),D.each(j,function(e,t){D.easing["easeIn"+e]=t,D.easing["easeOut"+e]=function(e){return 1-t(1-e)},D.easing["easeInOut"+e]=function(e){return e<.5?t(2*e)/2:1-t(-2*e+2)/2}});D.effects}),jQuery.fn.extend({everyTime:function(e,t,n,i){return this.each(function(){jQuery.timer.add(this,e,t,n,i)})},oneTime:function(e,t,n){return this.each(function(){jQuery.timer.add(this,e,t,n,1)})},stopTime:function(e,t){return this.each(function(){jQuery.timer.remove(this,e,t)})}}),jQuery.extend({timer:{global:[],guid:1,dataKey:"jQuery.timer",regex:/^([0-9]+(?:\.[0-9]*)?)\s*(.*s)?$/,powers:{ms:1,cs:10,ds:100,s:1e3,das:1e4,hs:1e5,ks:1e6},timeParse:function(e){if(null==e||null==e)return null;var t=this.regex.exec(jQuery.trim(e.toString()));return t[2]?parseFloat(t[1])*(this.powers[t[2]]||1):e},add:function(e,t,n,i,r){var o=0;if(jQuery.isFunction(n)&&(r=r||i,i=n,n=t),!("number"!=typeof(t=jQuery.timer.timeParse(t))||isNaN(t)||t<0)){("number"!=typeof r||isNaN(r)||r<0)&&(r=0),r=r||0;var s=jQuery.data(e,this.dataKey)||jQuery.data(e,this.dataKey,{});s[n]||(s[n]={}),i.timerID=i.timerID||this.guid++;function a(){(++o>r&&0!==r||!1===i.call(e,o))&&jQuery.timer.remove(e,n,i)}a.timerID=i.timerID,s[n][i.timerID]||(s[n][i.timerID]=window.setInterval(a,t)),this.global.push(e)}},remove:function(e,t,n){var i,r=jQuery.data(e,this.dataKey);if(r){if(t){if(r[t]){if(n)n.timerID&&(window.clearInterval(r[t][n.timerID]),delete r[t][n.timerID]);else for(var n in r[t])window.clearInterval(r[t][n]),delete r[t][n];for(i in r[t])break;i||(i=null,delete r[t])}}else for(t in r)this.remove(e,t,n);for(i in r)break;i||jQuery.removeData(e,this.dataKey)}}}}),jQuery(window).bind("unload",function(){jQuery.each(jQuery.timer.global,function(e,t){jQuery.timer.remove(t)})}),function(){"use strict";var a={version:"1.0.1-nanoui",templateSettings:{evaluate:/\{\{([\s\S]+?)\}\}/g,interpolate:/\{\{:([\s\S]+?)\}\}/g,encode:/\{\{>([\s\S]+?)\}\}/g,use:/\{\{#([\s\S]+?)\}\}/g,define:/\{\{##\s*([\w\.$]+)\s*(\:|=)([\s\S]+?)#\}\}/g,conditional:/\{\{\/?if\s*([\s\S]*?)\s*\}\}/g,conditionalElse:/\{\{else\s*([\s\S]*?)\s*\}\}/g,iterate:/\{\{\/?for\s*(?:\}\}|([\s\S]+?)\s*(?:\:\s*([\w$]+))?\s*(?:\:\s*([\w$]+))?\s*\}\})/g,props:/\{\{\/?props\s*(?:\}\}|([\s\S]+?)\s*(?:\:\s*([\w$]+))?\s*(?:\:\s*([\w$]+))?\s*\}\})/g,empty:/\{\{empty\}\}/g,varname:"data, config, helper",strip:!0,append:!0,selfcontained:!1},template:void 0,compile:void 0};function l(){var t={"&":"&#38;","<":"&#60;",">":"&#62;",'"':"&#34;","'":"&#39;","/":"&#47;"},e=/&(?!#?\w+;)|<|>|"|'|\//g;return function(){return this?this.replace(e,function(e){return t[e]||e}):this}}"undefined"!=typeof module&&module.exports?module.exports=a:"function"==typeof define&&define.amd?define(function(){return a}):function(){return this||(0,eval)("this")}().doT=a,String.prototype.encodeHTML=l();var u={append:{start:"'+(",end:")+'",endencode:"||'').toString().encodeHTML()+'"},split:{start:"';out+=(",end:");out+='",endencode:"||'').toString().encodeHTML();out+='"}},c=/$^/;function f(e){return e.replace(/\\('|\\)/g,"$1").replace(/[\r\t\n]/g," ")}a.template=function(e,t,n){var i,r=(t=t||a.templateSettings).append?u.append:u.split,o=0,s=t.use||t.define?function i(r,e,o){return("string"==typeof e?e:e.toString()).replace(r.define||c,function(e,i,t,n){return 0===i.indexOf("def.")&&(i=i.substring(4)),i in o||(":"===t?(r.defineParams&&n.replace(r.defineParams,function(e,t,n){o[i]={arg:t,text:n}}),i in o||(o[i]=n)):new Function("def","def['"+i+"']="+n)(o)),""}).replace(r.use||c,function(e,t){r.useParams&&(t=t.replace(r.useParams,function(e,t,n,i){if(o[n]&&o[n].arg&&i){var r=(n+":"+i).replace(/'|\\/g,"_");return o.__exp=o.__exp||{},o.__exp[r]=o[n].text.replace(new RegExp("(^|[^\\w$])"+o[n].arg+"([^\\w$])","g"),"$1"+i+"$2"),t+"def.__exp['"+r+"']"}}));var n=new Function("def","return "+t)(o);return n?i(r,n,o):n})}(t,e,n||{}):e;s=("var out='"+(t.strip?s.replace(/(^|\r|\n)\t* +| +\t*(\r|\n|$)/g," ").replace(/\r|\n|\t|\/\*[\s\S]*?\*\//g,""):s).replace(/'|\\/g,"\\$&").replace(t.interpolate||c,function(e,t){return r.start+f(t)+r.end}).replace(t.encode||c,function(e,t){return i=!0,r.start+f(t)+r.endencode}).replace(t.conditional||c,function(e,t){return t?"';if("+f(t)+"){out+='":"';}out+='"}).replace(t.conditionalElse||c,function(e,t){return t?"';}else if("+f(t)+"){out+='":"';}else{out+='"}).replace(t.iterate||c,function(e,t,n,i){if(!t)return"';} } out+='";o+=1,n=n||"value",i=i||"index",t=f(t);var r="arr"+o;return"';var "+r+"="+t+";if("+r+" && "+r+".length > 0){var "+n+","+i+"=-1,l"+o+"="+r+".length-1;while("+i+"<l"+o+"){"+n+"="+r+"["+i+"+=1];out+='"}).replace(t.props||c,function(e,t,n,i){if(!t)return"';} } out+='";o+=1,n=n||"value",i=i||"key",t=f(t);var r="arr"+o;return"';var "+r+"="+t+";if("+r+" && Object.size("+r+") > 0){var "+n+";for( var "+i+" in "+r+"){ if (!"+r+".hasOwnProperty("+i+")) continue; "+n+"="+r+"["+i+"];out+='"}).replace(t.empty||c,function(e){return"';}}else{if(true){out+='"}).replace(t.evaluate||c,function(e,t){return"';"+f(t)+"out+='"})+"';return out;").replace(/\n/g,"\\n").replace(/\t/g,"\\t").replace(/\r/g,"\\r").replace(/(\s|;|\}|^|\{)out\+='';/g,"$1").replace(/\+''/g,"").replace(/(\s|;|\}|^|\{)out\+=''\+/g,"$1out+="),i&&t.selfcontained&&(s="String.prototype.encodeHTML=("+l.toString()+"());"+s);try{return new Function(t.varname,s)}catch(e){throw"undefined"!=typeof console&&console.log("Could not create a template function: "+s),e}},a.compile=function(e,t){return a.template(e,null,t)}}(),function(e,t){"use strict";"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.returnExports=t()}(this,function(){function n(e){try{var t=S.call(e).replace(/\/\/.*\n/g,"").replace(/\/\*[.\s\S]*\*\//g,"").replace(/\n/gm," ").replace(/ {2}/g," ");return N.test(t)}catch(e){return}}function p(e){if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;if(E)return function(e){try{return n(e)?!1:(S.call(e),!0)}catch(e){return!1}}(e);if(n(e))return!1;var t=_.call(e);return"[object Function]"===t||"[object GeneratorFunction]"===t}var h,d,l=Array,e=l.prototype,a=Object,t=a.prototype,u=Function,i=u.prototype,v=String,r=v.prototype,y=Number,o=y.prototype,c=e.slice,s=e.splice,g=e.push,f=e.unshift,m=e.concat,b=e.join,x=i.call,w=i.apply,T=Math.max,C=Math.min,_=t.toString,E="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,S=Function.prototype.toString,N=/^\s*class /,D=RegExp.prototype.exec;h=function(e){return"object"==typeof e&&(E?function(e){try{return D.call(e),!0}catch(e){return!1}}(e):"[object RegExp]"===_.call(e))};var k=String.prototype.valueOf;d=function(e){return"string"==typeof e||"object"==typeof e&&(E?function(e){try{return k.call(e),!0}catch(e){return!1}}(e):"[object String]"===_.call(e))};function j(e){var t=typeof e;return null===e||"object"!=t&&"function"!=t}function A(){}var P,H,M=a.defineProperty&&function(){try{var e={};for(var t in a.defineProperty(e,"x",{enumerable:!1,value:e}),e)return!1;return e.x===e}catch(e){return!1}}(),L=(P=t.hasOwnProperty,H=M?function(e,t,n,i){!i&&t in e||a.defineProperty(e,t,{configurable:!0,enumerable:!1,writable:!0,value:n})}:function(e,t,n,i){!i&&t in e||(e[t]=n)},function(e,t,n){for(var i in t)P.call(t,i)&&H(e,i,t[i],n)}),O=y.isNaN||function(e){return e!=e},I=function(e){var t=+e;return O(t)?t=0:0!==t&&t!==1/0&&t!==-1/0&&(t=(0<t||-1)*Math.floor(Math.abs(t))),t},F=function(e){var t,n,i;if(j(e))return e;if(n=e.valueOf,p(n)&&(t=n.call(e),j(t)))return t;if(i=e.toString,p(i)&&(t=i.call(e),j(t)))return t;throw new TypeError},W=function(e){if(null==e)throw new TypeError("can't convert "+e+" to object");return a(e)},q=function(e){return e>>>0};L(i,{bind:function(t){var n=this;if(!p(n))throw new TypeError("Function.prototype.bind called on incompatible "+n);for(var i,r=c.call(arguments,1),e=T(0,n.length-r.length),o=[],s=0;s<e;s++)g.call(o,"$"+s);return i=u("binder","return function ("+b.call(o,",")+"){ return binder.apply(this, arguments); }")(function(){if(this instanceof i){var e=w.call(n,this,m.call(r,c.call(arguments)));return a(e)===e?e:this}return w.call(n,t,m.call(r,c.call(arguments)))}),n.prototype&&(A.prototype=n.prototype,i.prototype=new A,A.prototype=null),i}});var R=x.bind(t.hasOwnProperty),$=x.bind(t.toString),B=x.bind(c),z=w.bind(c);if("object"==typeof document&&document&&document.documentElement)try{B(document.documentElement.childNodes)}catch(e){var U=B,X=z;B=function(e){for(var t=[],n=e.length;0<n--;)t[n]=e[n];return X(t,U(arguments,1))},z=function(e,t){return X(B(e),t)}}var Y=x.bind(r.slice),Q=x.bind(r.split),J=x.bind(r.indexOf),V=x.bind(g),G=x.bind(t.propertyIsEnumerable),K=x.bind(e.sort),Z=l.isArray||function(e){return"[object Array]"===$(e)},ee=1!==[].unshift(0);L(e,{unshift:function(){return f.apply(this,arguments),this.length}},ee),L(l,{isArray:Z});function te(e){var i=!0,t=!0,n=!1;if(e)try{e.call("foo",function(e,t,n){"object"!=typeof n&&(i=!1)}),e.call([1],function(){"use strict";t="string"==typeof this},"x")}catch(e){n=!0}return!!e&&!n&&i&&t}var ne=a("a"),ie="a"!==ne[0]||!(0 in ne);L(e,{forEach:function(e,t){var n,i=W(this),r=ie&&d(this)?Q(this,""):i,o=-1,s=q(r.length);if(1<arguments.length&&(n=t),!p(e))throw new TypeError("Array.prototype.forEach callback must be a function");for(;++o<s;)o in r&&(void 0===n?e(r[o],o,i):e.call(n,r[o],o,i))}},!te(e.forEach)),L(e,{map:function(e,t){var n,i=W(this),r=ie&&d(this)?Q(this,""):i,o=q(r.length),s=l(o);if(1<arguments.length&&(n=t),!p(e))throw new TypeError("Array.prototype.map callback must be a function");for(var a=0;a<o;a++)a in r&&(s[a]=void 0===n?e(r[a],a,i):e.call(n,r[a],a,i));return s}},!te(e.map)),L(e,{filter:function(e,t){var n,i,r=W(this),o=ie&&d(this)?Q(this,""):r,s=q(o.length),a=[];if(1<arguments.length&&(i=t),!p(e))throw new TypeError("Array.prototype.filter callback must be a function");for(var l=0;l<s;l++)l in o&&(n=o[l],(void 0===i?e(n,l,r):e.call(i,n,l,r))&&V(a,n));return a}},!te(e.filter)),L(e,{every:function(e,t){var n,i=W(this),r=ie&&d(this)?Q(this,""):i,o=q(r.length);if(1<arguments.length&&(n=t),!p(e))throw new TypeError("Array.prototype.every callback must be a function");for(var s=0;s<o;s++)if(s in r&&!(void 0===n?e(r[s],s,i):e.call(n,r[s],s,i)))return!1;return!0}},!te(e.every)),L(e,{some:function(e,t){var n,i=W(this),r=ie&&d(this)?Q(this,""):i,o=q(r.length);if(1<arguments.length&&(n=t),!p(e))throw new TypeError("Array.prototype.some callback must be a function");for(var s=0;s<o;s++)if(s in r&&(void 0===n?e(r[s],s,i):e.call(n,r[s],s,i)))return!0;return!1}},!te(e.some));var re=!1;e.reduce&&(re="object"==typeof e.reduce.call("es5",function(e,t,n,i){return i})),L(e,{reduce:function(e,t){var n=W(this),i=ie&&d(this)?Q(this,""):n,r=q(i.length);if(!p(e))throw new TypeError("Array.prototype.reduce callback must be a function");if(0===r&&1===arguments.length)throw new TypeError("reduce of empty array with no initial value");var o,s=0;if(2<=arguments.length)o=t;else for(;;){if(s in i){o=i[s++];break}if(++s>=r)throw new TypeError("reduce of empty array with no initial value")}for(;s<r;s++)s in i&&(o=e(o,i[s],s,n));return o}},!re);var oe=!1;e.reduceRight&&(oe="object"==typeof e.reduceRight.call("es5",function(e,t,n,i){return i})),L(e,{reduceRight:function(e,t){var n,i=W(this),r=ie&&d(this)?Q(this,""):i,o=q(r.length);if(!p(e))throw new TypeError("Array.prototype.reduceRight callback must be a function");if(0===o&&1===arguments.length)throw new TypeError("reduceRight of empty array with no initial value");var s=o-1;if(2<=arguments.length)n=t;else for(;;){if(s in r){n=r[s--];break}if(--s<0)throw new TypeError("reduceRight of empty array with no initial value")}if(s<0)return n;for(;s in r&&(n=e(n,r[s],s,i)),s--;);return n}},!oe);var se=e.indexOf&&-1!==[0,1].indexOf(1,2);L(e,{indexOf:function(e,t){var n=ie&&d(this)?Q(this,""):W(this),i=q(n.length);if(0===i)return-1;var r=0;for(1<arguments.length&&(r=I(t)),r=0<=r?r:T(0,i+r);r<i;r++)if(r in n&&n[r]===e)return r;return-1}},se);var ae=e.lastIndexOf&&-1!==[0,1].lastIndexOf(0,-3);L(e,{lastIndexOf:function(e,t){var n=ie&&d(this)?Q(this,""):W(this),i=q(n.length);if(0===i)return-1;var r=i-1;for(1<arguments.length&&(r=C(r,I(t))),r=0<=r?r:i-Math.abs(r);0<=r;r--)if(r in n&&e===n[r])return r;return-1}},ae);var le,ue,ce=(ue=(le=[1,2]).splice(),2===le.length&&Z(ue)&&0===ue.length);L(e,{splice:function(e,t){return 0===arguments.length?[]:s.apply(this,arguments)}},!ce);var fe,pe=(fe={},e.splice.call(fe,0,0,1),1===fe.length);L(e,{splice:function(e,t){if(0===arguments.length)return[];var n=arguments;return this.length=T(I(this.length),0),0<arguments.length&&"number"!=typeof t&&((n=B(arguments)).length<2?V(n,this.length-e):n[1]=I(t)),s.apply(this,n)}},!pe);var he,de,ge=((he=new l(1e5))[8]="x",he.splice(1,1),7===he.indexOf("x")),me=((de=[])[256]="a",de.splice(257,0,"b"),"a"===de[256]);L(e,{splice:function(e,t){for(var n,i=W(this),r=[],o=q(i.length),s=I(e),a=s<0?T(o+s,0):C(s,o),l=C(T(I(t),0),o-a),u=0;u<l;)n=v(a+u),R(i,n)&&(r[u]=i[n]),u+=1;var c,f=B(arguments,2),p=f.length;if(p<l){u=a;for(var h=o-l;u<h;)n=v(u+l),c=v(u+p),R(i,n)?i[c]=i[n]:delete i[c],u+=1;for(var d=(u=o)-l+p;d<u;)delete i[u-1],--u}else if(l<p)for(u=o-l;a<u;)n=v(u+l-1),c=v(u+p-1),R(i,n)?i[c]=i[n]:delete i[c],--u;u=a;for(var g=0;g<f.length;++g)i[u]=f[g],u+=1;return i.length=o-l+p,r}},!ge||!me);var ve,ye=e.join;try{ve="1,2,3"!==Array.prototype.join.call("123",",")}catch(e){ve=!0}ve&&L(e,{join:function(e){var t=void 0===e?",":e;return ye.call(d(this)?Q(this,""):this,t)}},ve);var be="1,2"!==[1,2].join(void 0);be&&L(e,{join:function(e){var t=void 0===e?",":e;return ye.call(this,t)}},be);function xe(e){for(var t=W(this),n=q(t.length),i=0;i<arguments.length;)t[n+i]=arguments[i],i+=1;return t.length=n+i,n+i}var we,Te=(we={},1!==Array.prototype.push.call(we,void 0)||1!==we.length||void 0!==we[0]||!R(we,0));L(e,{push:function(e){return Z(this)?g.apply(this,arguments):xe.apply(this,arguments)}},Te);var Ce,_e=1!==(Ce=[]).push(void 0)||1!==Ce.length||void 0!==Ce[0]||!R(Ce,0);L(e,{push:xe},_e),L(e,{slice:function(e,t){var n=d(this)?Q(this,""):this;return z(n,arguments)}},ie);var Ee=function(){try{[1,2].sort(null)}catch(e){try{[1,2].sort({})}catch(e){return!1}}return!0}(),Se=function(){try{return[1,2].sort(/a/),!1}catch(e){}return!0}(),Ne=function(){try{return[1,2].sort(void 0),!0}catch(e){}return!1}();L(e,{sort:function(e){if(void 0===e)return K(this);if(!p(e))throw new TypeError("Array.prototype.sort callback must be a function");return K(this,e)}},Ee||!Ne||!Se);function De(e){var t=e.constructor;return t&&t.prototype===e}function ke(e){return"[object Arguments]"===$(e)}var je=!G({toString:null},"toString"),Ae=G(function(){},"prototype"),Pe=!R("x","0"),He={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0,$width:!0,$height:!0,$top:!0,$localStorage:!0},Me=function(){if("undefined"==typeof window)return!1;for(var e in window)try{!He["$"+e]&&R(window,e)&&null!==window[e]&&"object"==typeof window[e]&&De(window[e])}catch(e){return!0}return!1}(),Le=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],Oe=Le.length,Ie=ke(arguments)?ke:function(e){return null!==e&&"object"==typeof e&&"number"==typeof e.length&&0<=e.length&&!Z(e)&&p(e.callee)};L(a,{keys:function(e){var t=p(e),n=Ie(e),i=null!==e&&"object"==typeof e,r=i&&d(e);if(!i&&!t&&!n)throw new TypeError("Object.keys called on a non-object");var o=[],s=Ae&&t;if(r&&Pe||n)for(var a=0;a<e.length;++a)V(o,v(a));if(!n)for(var l in e)s&&"prototype"===l||!R(e,l)||V(o,v(l));if(je)for(var u=function(e){if("undefined"==typeof window||!Me)return De(e);try{return De(e)}catch(e){return!1}}(e),c=0;c<Oe;c++){var f=Le[c];u&&"constructor"===f||!R(e,f)||V(o,f)}return o}});var Fe=a.keys&&function(){return 2===a.keys(arguments).length}(1,2),We=a.keys&&function(){var e=a.keys(arguments);return 1!==arguments.length||1!==e.length||1!==e[0]}(1),qe=a.keys;L(a,{keys:function(e){return Ie(e)?qe(B(e)):qe(e)}},!Fe||We);var Re,$e,Be=0!==new Date(-0xc782b5b342b24).getUTCMonth(),ze=new Date(-0x55d318d56a724),Ue=new Date(14496624e5),Xe="Mon, 01 Jan -45875 11:59:59 GMT"!==ze.toUTCString();$e=ze.getTimezoneOffset()<-720?(Re="Tue Jan 02 -45875"!==ze.toDateString(),!/^Thu Dec 10 2015 \d\d:\d\d:\d\d GMT[-+]\d\d\d\d(?: |$)/.test(String(Ue))):(Re="Mon Jan 01 -45875"!==ze.toDateString(),!/^Wed Dec 09 2015 \d\d:\d\d:\d\d GMT[-+]\d\d\d\d(?: |$)/.test(String(Ue)));function Ye(e,t){return Ve(new Date(t,e,0))}var Qe=x.bind(Date.prototype.getFullYear),Je=x.bind(Date.prototype.getMonth),Ve=x.bind(Date.prototype.getDate),Ge=x.bind(Date.prototype.getUTCFullYear),Ke=x.bind(Date.prototype.getUTCMonth),Ze=x.bind(Date.prototype.getUTCDate),et=x.bind(Date.prototype.getUTCDay),tt=x.bind(Date.prototype.getUTCHours),nt=x.bind(Date.prototype.getUTCMinutes),it=x.bind(Date.prototype.getUTCSeconds),rt=x.bind(Date.prototype.getUTCMilliseconds),ot=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],st=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];L(Date.prototype,{getFullYear:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var e=Qe(this);return e<0&&11<Je(this)?e+1:e},getMonth:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var e=Qe(this),t=Je(this);return e<0&&11<t?0:t},getDate:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var e=Qe(this),t=Je(this),n=Ve(this);return!(e<0&&11<t)||12===t?n:Ye(0,e+1)-n+1},getUTCFullYear:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var e=Ge(this);return e<0&&11<Ke(this)?e+1:e},getUTCMonth:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var e=Ge(this),t=Ke(this);return e<0&&11<t?0:t},getUTCDate:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var e=Ge(this),t=Ke(this),n=Ze(this);return!(e<0&&11<t)||12===t?n:Ye(0,e+1)-n+1}},Be),L(Date.prototype,{toUTCString:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var e=et(this),t=Ze(this),n=Ke(this),i=Ge(this),r=tt(this),o=nt(this),s=it(this);return ot[e]+", "+(t<10?"0"+t:t)+" "+st[n]+" "+i+" "+(r<10?"0"+r:r)+":"+(o<10?"0"+o:o)+":"+(s<10?"0"+s:s)+" GMT"}},Be||Xe),L(Date.prototype,{toDateString:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var e=this.getDay(),t=this.getDate(),n=this.getMonth(),i=this.getFullYear();return ot[e]+" "+st[n]+" "+(t<10?"0"+t:t)+" "+i}},Be||Re),(Be||$e)&&(Date.prototype.toString=function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var e=this.getDay(),t=this.getDate(),n=this.getMonth(),i=this.getFullYear(),r=this.getHours(),o=this.getMinutes(),s=this.getSeconds(),a=this.getTimezoneOffset(),l=Math.floor(Math.abs(a)/60),u=Math.floor(Math.abs(a)%60);return ot[e]+" "+st[n]+" "+(t<10?"0"+t:t)+" "+i+" "+(r<10?"0"+r:r)+":"+(o<10?"0"+o:o)+":"+(s<10?"0"+s:s)+" GMT"+(0<a?"-":"+")+(l<10?"0"+l:l)+(u<10?"0"+u:u)},M&&a.defineProperty(Date.prototype,"toString",{configurable:!0,enumerable:!1,writable:!0}));var at=-621987552e5,lt="-000001",ut=Date.prototype.toISOString&&-1===new Date(at).toISOString().indexOf(lt),ct=Date.prototype.toISOString&&"1969-12-31T23:59:59.999Z"!==new Date(-1).toISOString(),ft=x.bind(Date.prototype.getTime);L(Date.prototype,{toISOString:function(){if(!isFinite(this)||!isFinite(ft(this)))throw new RangeError("Date.prototype.toISOString called on non-finite value.");var e=Ge(this),t=Ke(this);e+=Math.floor(t/12);var n=[(t=(t%12+12)%12)+1,Ze(this),tt(this),nt(this),it(this)];e=(e<0?"-":9999<e?"+":"")+Y("00000"+Math.abs(e),0<=e&&e<=9999?-4:-6);for(var i=0;i<n.length;++i)n[i]=Y("00"+n[i],-2);return e+"-"+B(n,0,2).join("-")+"T"+B(n,2).join(":")+"."+Y("000"+rt(this),-3)+"Z"}},ut||ct),function(){try{return Date.prototype.toJSON&&null===new Date(NaN).toJSON()&&-1!==new Date(at).toJSON().indexOf(lt)&&Date.prototype.toJSON.call({toISOString:function(){return!0}})}catch(e){return!1}}()||(Date.prototype.toJSON=function(){var e=a(this),t=F(e);if("number"==typeof t&&!isFinite(t))return null;var n=e.toISOString;if(!p(n))throw new TypeError("toISOString property is not callable");return n.call(e)});var pt=1e15===Date.parse("+033658-09-27T01:46:40.000Z"),ht=!isNaN(Date.parse("2012-04-04T24:00:00.500Z"))||!isNaN(Date.parse("2012-11-31T23:59:59.000Z"))||!isNaN(Date.parse("2012-12-31T23:59:60.000Z"));if(isNaN(Date.parse("2000-01-01T00:00:00.000Z"))||ht||!pt){var dt=Math.pow(2,31)-1,gt=O(new Date(1970,0,1,0,0,0,1+dt).getTime());Date=function(d){function g(e,t){var n=1<t?1:0;return i[t]+Math.floor((e-1969+n)/4)-Math.floor((e-1901+n)/100)+Math.floor((e-1601+n)/400)+365*(e-1970)}var h=function(e,t,n,i,r,o,s){var a,l=arguments.length;if(this instanceof d){var u=o,c=s;if(gt&&7<=l&&dt<s){var f=Math.floor(s/dt)*dt,p=Math.floor(f/1e3);u+=p,c-=1e3*p}a=1===l&&v(e)===e?new d(h.parse(e)):7<=l?new d(e,t,n,i,r,u,c):6<=l?new d(e,t,n,i,r,u):5<=l?new d(e,t,n,i,r):4<=l?new d(e,t,n,i):3<=l?new d(e,t,n):2<=l?new d(e,t):1<=l?new d(e instanceof d?+e:e):new d}else a=d.apply(this,arguments);return j(a)||L(a,{constructor:h},!0),a},m=new RegExp("^(\\d{4}|[+-]\\d{6})(?:-(\\d{2})(?:-(\\d{2})(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:(\\.\\d{1,}))?)?(Z|(?:([-+])(\\d{2}):(\\d{2})))?)?)?)?$"),i=[0,31,59,90,120,151,181,212,243,273,304,334,365];for(var e in d)R(d,e)&&(h[e]=d[e]);L(h,{now:d.now,UTC:d.UTC},!0),h.prototype=d.prototype,L(h.prototype,{constructor:h},!0);return L(h,{parse:function(e){var t=m.exec(e);if(t){var n,i=y(t[1]),r=y(t[2]||1)-1,o=y(t[3]||1)-1,s=y(t[4]||0),a=y(t[5]||0),l=y(t[6]||0),u=Math.floor(1e3*y(t[7]||0)),c=Boolean(t[4]&&!t[8]),f="-"===t[9]?1:-1,p=y(t[10]||0),h=y(t[11]||0);return s<(0<a||0<l||0<u?24:25)&&a<60&&l<60&&u<1e3&&-1<r&&r<12&&p<24&&h<60&&-1<o&&o<g(i,1+r)-g(i,r)&&(n=1e3*(60*((n=60*(24*(g(i,r)+o)+s+p*f))+a+h*f)+l)+u,c&&(n=function(e){var t=0,n=e;if(gt&&dt<n){var i=Math.floor(n/dt)*dt,r=Math.floor(i/1e3);t+=r,n-=1e3*r}return y(new d(1970,0,1,0,0,t,n))}(n)),-864e13<=n&&n<=864e13)?n:NaN}return d.parse.apply(this,arguments)}}),h}(Date)}Date.now||(Date.now=function(){return(new Date).getTime()});var mt=o.toFixed&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0)),vt={base:1e7,size:6,data:[0,0,0,0,0,0],multiply:function(e,t){for(var n=-1,i=t;++n<vt.size;)i+=e*vt.data[n],vt.data[n]=i%vt.base,i=Math.floor(i/vt.base)},divide:function(e){for(var t=vt.size,n=0;0<=--t;)n+=vt.data[t],vt.data[t]=Math.floor(n/e),n=n%e*vt.base},numToString:function(){for(var e=vt.size,t="";0<=--e;)if(""!==t||0===e||0!==vt.data[e]){var n=v(vt.data[e]);""===t?t=n:t+=Y("0000000",0,7-n.length)+n}return t},pow:function e(t,n,i){return 0===n?i:n%2==1?e(t,n-1,i*t):e(t*t,n/2,i)},log:function(e){for(var t=0,n=e;4096<=n;)t+=12,n/=4096;for(;2<=n;)t+=1,n/=2;return t}};L(o,{toFixed:function(e){var t,n,i,r,o,s,a,l;if(t=y(e),(t=O(t)?0:Math.floor(t))<0||20<t)throw new RangeError("Number.toFixed called with invalid number of decimals");if(n=y(this),O(n))return"NaN";if(n<=-1e21||1e21<=n)return v(n);if(i="",n<0&&(i="-",n=-n),r="0",1e-21<n)if(s=(o=vt.log(n*vt.pow(2,69,1))-69)<0?n*vt.pow(2,-o,1):n/vt.pow(2,o,1),s*=4503599627370496,0<(o=52-o)){for(vt.multiply(0,s),a=t;7<=a;)vt.multiply(1e7,0),a-=7;for(vt.multiply(vt.pow(10,a,1),0),a=o-1;23<=a;)vt.divide(1<<23),a-=23;vt.divide(1<<a),vt.multiply(1,1),vt.divide(2),r=vt.numToString()}else vt.multiply(0,s),vt.multiply(1<<-o,0),r=vt.numToString()+Y("0.00000000000000000000",2,2+t);return r=0<t?(l=r.length)<=t?i+Y("0.0000000000000000000",0,t-l+2)+r:i+Y(r,0,l-t)+"."+Y(r,l-t):i+r}},mt);var yt,bt,xt=function(){try{return"1"===1..toPrecision(void 0)}catch(e){return!0}}(),wt=o.toPrecision;L(o,{toPrecision:function(e){return void 0===e?wt.call(this):wt.call(this,e)}},xt),2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||"t"==="tesst".split(/(s)*/)[1]||4!=="test".split(/(?:)/,-1).length||"".split(/.?/).length||1<".".split(/()()/).length?(yt=void 0===/()??/.exec("")[1],bt=Math.pow(2,32)-1,r.split=function(e,t){var n=String(this);if(void 0===e&&0===t)return[];if(!h(e))return Q(this,e,t);var i,r,o,s,a=[],l=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),u=0,c=new RegExp(e.source,l+"g");yt||(i=new RegExp("^"+c.source+"$(?!\\s)",l));var f=void 0===t?bt:q(t);for(r=c.exec(n);r&&!(u<(o=r.index+r[0].length)&&(V(a,Y(n,u,r.index)),!yt&&1<r.length&&r[0].replace(i,function(){for(var e=1;e<arguments.length-2;e++)void 0===arguments[e]&&(r[e]=void 0)}),1<r.length&&r.index<n.length&&g.apply(a,B(r,1)),s=r[0].length,u=o,f<=a.length));)c.lastIndex===r.index&&c.lastIndex++,r=c.exec(n);return u===n.length?!s&&c.test("")||V(a,""):V(a,Y(n,u)),f<a.length?B(a,0,f):a}):"0".split(void 0,0).length&&(r.split=function(e,t){return void 0===e&&0===t?[]:Q(this,e,t)});var Tt,Ct=r.replace;(Tt=[],"x".replace(/x(.)?/g,function(e,t){V(Tt,t)}),1===Tt.length&&void 0===Tt[0])||(r.replace=function(r,o){var e=p(o),t=h(r)&&/\)[*?]/.test(r.source);if(e&&t){return Ct.call(this,r,function(e){var t=arguments.length,n=r.lastIndex;r.lastIndex=0;var i=r.exec(e)||[];return r.lastIndex=n,V(i,arguments[t-2],arguments[t-1]),o.apply(this,i)})}return Ct.call(this,r,o)});var _t=r.substr,Et="".substr&&"b"!=="0b".substr(-1);L(r,{substr:function(e,t){var n=e;return e<0&&(n=T(this.length+e,0)),_t.call(this,n,t)}},Et);var St="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff",Nt="["+St+"]",Dt=new RegExp("^"+Nt+Nt+"*"),kt=new RegExp(Nt+Nt+"*$"),jt=r.trim&&(St.trim()||!"​".trim());L(r,{trim:function(){if(null==this)throw new TypeError("can't convert "+this+" to object");return v(this).replace(Dt,"").replace(kt,"")}},jt);var At=x.bind(String.prototype.trim),Pt=r.lastIndexOf&&-1!=="abcあい".lastIndexOf("あい",2);L(r,{lastIndexOf:function(e,t){if(null==this)throw new TypeError("can't convert "+this+" to object");for(var n=v(this),i=v(e),r=1<arguments.length?y(t):NaN,o=O(r)?1/0:I(r),s=C(T(o,0),n.length),a=i.length,l=s+a;0<l;){l=T(0,l-a);var u=J(Y(n,l,s+a),i);if(-1!==u)return l+u}return-1}},Pt);var Ht,Mt,Lt,Ot=r.lastIndexOf;if(L(r,{lastIndexOf:function(e){return Ot.apply(this,arguments)}},1!==r.lastIndexOf.length),8===parseInt(St+"08")&&22===parseInt(St+"0x16")||(parseInt=(Ht=parseInt,Mt=/^[-+]?0[xX]/,function(e,t){var n=At(String(e)),i=y(t)||(Mt.test(n)?16:10);return Ht(n,i)})),1/parseFloat("-0")!=-1/0&&(parseFloat=(Lt=parseFloat,function(e){var t=At(String(e)),n=Lt(t);return 0===n&&"-"===Y(t,0,1)?-0:n})),"RangeError: test"!==String(new RangeError("test"))){Error.prototype.toString=function(){if(null==this)throw new TypeError("can't convert "+this+" to object");var e=this.name;void 0===e?e="Error":"string"!=typeof e&&(e=v(e));var t=this.message;return void 0===t?t="":"string"!=typeof t&&(t=v(t)),e?t?e+": "+t:e:t}}if(M){function It(e,t){if(G(e,t)){var n=Object.getOwnPropertyDescriptor(e,t);n.configurable&&(n.enumerable=!1,Object.defineProperty(e,t,n))}}It(Error.prototype,"message"),""!==Error.prototype.message&&(Error.prototype.message=""),It(Error.prototype,"name")}if("/a/gim"!==String(/a/gim)){RegExp.prototype.toString=function(){var e="/"+this.source+"/";return this.global&&(e+="g"),this.ignoreCase&&(e+="i"),this.multiline&&(e+="m"),e}}}),function(e){"use strict";var d=/^[a-z]+:/,g=/[-a-z0-9]+(\.[-a-z0-9])*:\d+/i,m=/\/\/(.*?)(?::(.*?))?@/,t=/^win/i,v=/:$/,y=/^\?/,b=/^#/,x=/(.*\/)/,w=/^\/{2,}/,n=/'/g,i=/%([ef][0-9a-f])%([89ab][0-9a-f])%([89ab][0-9a-f])/gi,r=/%([cd][0-9a-f])%([89ab][0-9a-f])/gi,o=/%([0-7][0-9a-f])/gi,a=/\+/g,s=/^\w:$/,T=/[^/#?]/;var l,C="undefined"==typeof window&&"undefined"!=typeof global&&"function"==typeof require,_=C?e.require:null,E={protocol:"protocol",host:"hostname",port:"port",path:"pathname",query:"search",hash:"hash"},S={ftp:21,gopher:70,http:80,https:443,ws:80,wss:443};function N(){return C?l=l||"file://"+(process.platform.match(t)?"/":"")+_("fs").realpathSync("."):document.location.href}function u(e,t,n){var i,r,o;t=t||N(),C?i=_("url").parse(t):(i=document.createElement("a")).href=t;var s,a,l=(a={path:!0,query:!0,hash:!0},(s=t)&&d.test(s)&&(a.protocol=!0,a.host=!0,g.test(s)&&(a.port=!0),m.test(s)&&(a.user=!0,a.pass=!0)),a);for(r in o=t.match(m)||[],E)l[r]?e[r]=i[E[r]]||"":e[r]="";if(e.protocol=e.protocol.replace(v,""),e.query=e.query.replace(y,""),e.hash=D(e.hash.replace(b,"")),e.user=D(o[1]||""),e.pass=D(o[2]||""),e.port=S[e.protocol]==e.port||0==e.port?"":e.port,!l.protocol&&T.test(t.charAt(0))&&(e.path=t.split("?")[0].split("#")[0]),!l.protocol&&n){var u=new j(N().match(x)[0]),c=u.path.split("/"),f=e.path.split("/"),p=["protocol","user","pass","host","port"],h=p.length;for(c.pop(),r=0;r<h;r++)e[p[r]]=u[p[r]];for(;".."===f[0];)c.pop(),f.shift();e.path=("/"!==t.charAt(0)?c.join("/"):"")+"/"+f.join("/")}e.path=e.path.replace(w,"/"),e.paths(e.paths()),e.query=new k(e.query)}function c(e){return encodeURIComponent(e).replace(n,"%27")}function D(e){return(e=(e=(e=e.replace(a," ")).replace(i,function(e,t,n,i){var r=parseInt(t,16)-224,o=parseInt(n,16)-128;if(0==r&&o<32)return e;var s=(r<<12)+(o<<6)+(parseInt(i,16)-128);return 65535<s?e:String.fromCharCode(s)})).replace(r,function(e,t,n){var i=parseInt(t,16)-192;if(i<2)return e;var r=parseInt(n,16)-128;return String.fromCharCode((i<<6)+r)})).replace(o,function(e,t){return String.fromCharCode(parseInt(t,16))})}function k(e){for(var t=e.split("&"),n=0,i=t.length;n<i;n++){var r=t[n].split("="),o=decodeURIComponent(r[0].replace(a," "));if(o){var s=void 0!==r[1]?D(r[1]):null;void 0===this[o]?this[o]=s:(this[o]instanceof Array||(this[o]=[this[o]]),this[o].push(s))}}}function j(e,t){u(this,e,!t)}k.prototype.toString=function(){var e,t,n="",i=c;for(e in this){var r=this[e];if(!(r instanceof Function||void 0===r))if(r instanceof Array){var o=r.length;if(!o){n+=(n?"&":"")+i(e)+"=";continue}for(t=0;t<o;t++){var s=r[t];void 0!==s&&(n+=n?"&":"",n+=i(e)+(null===s?"":"="+i(s)))}}else n+=n?"&":"",n+=i(e)+(null===r?"":"="+i(r))}return n},j.prototype.clearQuery=function(){for(var e in this.query)this.query[e]instanceof Function||delete this.query[e];return this},j.prototype.queryLength=function(){var e=0;for(var t in this.query)this.query[t]instanceof Function||e++;return e},j.prototype.isEmptyQuery=function(){return 0===this.queryLength()},j.prototype.paths=function(e){var t,n="",i=0;if(e&&e.length&&e+""!==e){for(this.isAbsolute()&&(n="/"),t=e.length;i<t;i++)e[i]=!i&&s.test(e[i])?e[i]:c(e[i]);this.path=n+e.join("/")}for(i=0,t=(e=("/"===this.path.charAt(0)?this.path.slice(1):this.path).split("/")).length;i<t;i++)e[i]=D(e[i]);return e},j.prototype.encode=c,j.prototype.decode=D,j.prototype.isAbsolute=function(){return this.protocol||"/"===this.path.charAt(0)},j.prototype.toString=function(){return(this.protocol&&this.protocol+"://")+(this.user&&c(this.user)+(this.pass&&":"+c(this.pass))+"@")+(this.host&&this.host)+(this.port&&":"+this.port)+(this.path&&this.path)+(this.query.toString()&&"?"+this.query)+(this.hash&&"#"+c(this.hash))},e[e.exports?"exports":"Url"]=j}("undefined"!=typeof module&&module.exports?module:window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
